{
    "sourceFile": "controller/userController/orderController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1736722022030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736722407646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                 if (userWallet) {\r\n                     userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                     userWallet.transaction.push({\r\n-                        wallet_amount: order. payableAmount,\r\n+                        wallet_amount:M order. payableAmount,\r\n                         order_id: order.orderId,\r\n                         transactionType: 'Credited',\r\n                         transaction_date: new Date()\r\n                     });\r\n@@ -195,9 +195,9 @@\n     try {\r\n         const { orderId, paymentId, razorpayOrderId } = req.body;\r\n         const update = {\r\n             paymentId: paymentId,\r\n-            paymentStatus: 'Succes',\r\n+            paymentStatus: 'Paid',\r\n             orderStatus: 'Pending',\r\n             paid:true\r\n         };\r\n         const order = await Order.findByIdAndUpdate(orderId, update, { new: true });\r\n"
                },
                {
                    "date": 1736722416149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                 if (userWallet) {\r\n                     userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                     userWallet.transaction.push({\r\n-                        wallet_amount:M order. payableAmount,\r\n+                        wallet_amount:Math.floor(),\r\n                         order_id: order.orderId,\r\n                         transactionType: 'Credited',\r\n                         transaction_date: new Date()\r\n                     });\r\n"
                },
                {
                    "date": 1736722422153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                 if (userWallet) {\r\n                     userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                     userWallet.transaction.push({\r\n-                        wallet_amount:Math.floor(),\r\n+                        wallet_amount:Math.floor( order. payableAmount/),\r\n                         order_id: order.orderId,\r\n                         transactionType: 'Credited',\r\n                         transaction_date: new Date()\r\n                     });\r\n"
                },
                {
                    "date": 1736722696359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                 if (userWallet) {\r\n                     userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                     userWallet.transaction.push({\r\n-                        wallet_amount:Math.floor( order. payableAmount/),\r\n+                        wallet_amount:Math.floor order. payableAmount/2),\r\n                         order_id: order.orderId,\r\n                         transactionType: 'Credited',\r\n                         transaction_date: new Date()\r\n                     });\r\n"
                },
                {
                    "date": 1736722701519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                 if (userWallet) {\r\n                     userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                     userWallet.transaction.push({\r\n-                        wallet_amount:Math.floor order. payableAmount/2),\r\n+                        wallet_amount: order. payableAmount\r\n                         order_id: order.orderId,\r\n                         transactionType: 'Credited',\r\n                         transaction_date: new Date()\r\n                     });\r\n"
                }
            ],
            "date": 1736722022030,
            "name": "Commit-0",
            "content": "\r\n\r\nconst Order = require('../../model/orderSchema');\r\nconst Product = require('../../model/productSchema')\r\nconst Wallet = require('../../model/walletSchema')\r\nconst Razorpay =  require('razorpay');\r\nconst Cart = require('../../model/cartSchema')\r\nrequire('dotenv').config();\r\n\r\n\r\n//--------------------------------- user order page -----------------------------\r\n\r\n\r\nexports.orderPage = async (req, res) => {\r\n    try {\r\n        const user = req.session.user;\r\n        if (!user) {\r\n            req.flash('error', \"User not found. Please login again.\");\r\n            return res.redirect(\"/login\");\r\n        }\r\n\r\n        // Get the current page number from the query parameters, default to 1\r\n        const page = parseInt(req.query.page) || 1;\r\n        const limit =5; // Set the number of orders to display per page\r\n        const skip = (page - 1) * limit;\r\n\r\n        // Fetch orders with pagination\r\n        const orderDetails = await Order.find({ userId: user })\r\n            .populate(\"items.productId\")\r\n            .sort({ updatedAt: -1 })\r\n            .limit(limit)\r\n            .skip(skip);\r\n\r\n        // Get total count of orders for pagination\r\n        const totalOrders = await Order.countDocuments({ userId: user });\r\n        console.log(\"totalordes\",totalOrders)\r\n        const totalPage = Math.ceil(totalOrders / limit);\r\n        console.log(\"totalPage\",totalPage)\r\n// console.log(orderDetails+\"order details\");\r\n\r\n\r\n\r\n        res.render(\"user/order\", {\r\n            title: \"Orders\",\r\n            user,\r\n            orderDetails,\r\n            currentPage: page,\r\n            totalPage,\r\n            limit,\r\n        });\r\n    } catch (err) {\r\n        console.error(`Error rendering the order page: ${err}`);\r\n        req.flash(\"error\", \"Error rendering the order page, please Try again later.\");\r\n        res.redirect(\"/\");\r\n    }\r\n};\r\n\r\nexports.viewOrderDetails = async (req, res) => {\r\n    try {\r\n        const orderId = req.params.id;\r\n        const order = await Order.findById(orderId).populate('items.productId').exec();\r\n         \r\n        if (!order) {\r\n            return res.status(404).json({ message: 'Order not found' });\r\n        }\r\n    \r\n       \r\n        res.json(order);\r\n    } catch (error) {\r\n        console.error(`Error from viewOrderDetails: ${error}`);\r\n        res.status(500).json({ message: 'Internal Server Error' });\r\n    }\r\n};\r\n\r\nconst razorpay = new Razorpay({\r\n    key_id: \"rzp_test_KDYrLJHnu3O9Ip\", // Your Razorpay key_id\r\n    key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" // Your Razorpay key_secret\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexports.cancelOrder = async (req,res) => {\r\n    try {\r\nconsole.log('hai')\r\n     const orderId = req.params.id;\r\n    \r\n        const {action,reason,productId} = req.body;\r\n        console.log(`action = ${action}`)   \r\n \r\n        if(!productId){\r\n            return res.json({ success: false, message: 'Invalid order ID' });\r\n        }\r\n        const order = await Order.findById(orderId);\r\n        order.status='Cancelled'\r\n            \r\n        if (!order) {\r\n            return res.json({ success: false, message: 'Order not found' });\r\n        }\r\n       if(action == 'cancel'){\r\n        if(order.paid){\r\n            if (order.paymentMethod === 'Razorpay' || order.paymentMethod === 'Wallet' ) {\r\n                const userWallet = await Wallet.findOne({ userID: order.userId });\r\n                if (userWallet) {\r\n                    userWallet.balance = (userWallet.balance || 0) + order. payableAmount;\r\n                    userWallet.transaction.push({\r\n                        wallet_amount: order. payableAmount,\r\n                        order_id: order.orderId,\r\n                        transactionType: 'Credited',\r\n                        transaction_date: new Date()\r\n                    });\r\n                    await userWallet.save();\r\n                } else {\r\n                    await Wallet.create({\r\n                        userID: order.userId,\r\n                        balance: order. payableAmount,\r\n                        transaction: [{\r\n                            wallet_amount: order. payableAmount,\r\n                            order_id: order.orderId,\r\n                            transactionType: 'Credited',\r\n                            transaction_date: new Date()\r\n                        }]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n       }\r\n \r\n\r\n\r\nconst item = order.items.find(item => item.productId.toString() === productId);\r\n\r\nif(item){\r\n    item.status = action === 'return'?'Requested':'Cancelled';\r\n    item.reasonForCancellation = action ==='cancel'?reason:null;\r\n    item.reasonForReturn = action === 'return'?reason:null;\r\n}\r\n\r\nconst product = await Product.findById(productId);\r\n\r\nconsole.log(`product = ${product}`)\r\nif(product){\r\n    product.stock += item.productCount;\r\n    await product.save();\r\n}else{\r\n    return res.json({ success: false, message: 'Product not found in inventory' });\r\n}\r\n\r\nconsole.log(`after = ${product.stock}`)\r\n\r\n        \r\n         console.log(`order = ${order}`)\r\n        await order.save();\r\n        return res.json({ success: true });\r\n    } catch (error) {\r\n     console.log(`error form cancelOrder:${error.message}`)\r\n     res.json({ success: false, message: 'Cannot cancel this order right now, please try again' });\r\n    }\r\n}\r\n\r\nexports.retryRazorPay = async(req,res) =>{\r\n    try {\r\n        console.log(`hi from retryRazorPay`)\r\n        const { orderId } = req.body;\r\n        const order = await Order.findById(orderId);\r\n\r\n        console.log(`order = ${order}`)\r\n\r\n        if (!order) {\r\n            return res.status(404).send('Order not found');\r\n        }\r\n\r\n        const razorpayOrder = await razorpay.orders.create({\r\n            amount: Math.round(order.payableAmount * 100),\r\n            currency: \"INR\",\r\n            receipt: `receipt#${orderId}`\r\n        });\r\n\r\n        if (razorpayOrder) {\r\n            return res.status(200).json({\r\n                ...order.toObject(),\r\n                razorpayOrderId: razorpayOrder  \r\n            });\r\n        } else {\r\n            return res.status(500).send('Razorpay order creation failed');\r\n        } \r\n    } catch (error) {\r\n       console.log(`error from retryRazorPay ${error}`) \r\n       res.status(500).send('Internal Server Error');\r\n    }\r\n}\r\n\r\nexports.retryPayment = async (req,res) =>{\r\n    try {\r\n        const { orderId, paymentId, razorpayOrderId } = req.body;\r\n        const update = {\r\n            paymentId: paymentId,\r\n            paymentStatus: 'Succes',\r\n            orderStatus: 'Pending',\r\n            paid:true\r\n        };\r\n        const order = await Order.findByIdAndUpdate(orderId, update, { new: true });\r\n        if (!order) {\r\n            return res.status(404).send('Order not found');\r\n        }\r\n        for (let product of order.items) {\r\n            await Product.findByIdAndUpdate(product.productId, {\r\n                $inc: { stock: -product.productCount }\r\n            });\r\n        }\r\n        await Cart.deleteOne({ userId:req.session.user_id});\r\n        res.status(200).json(order);\r\n    } catch (error) {\r\n        console.log(`error from retryPayment ${error}`)\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n}\r\n\r\n\r\n"
        }
    ]
}