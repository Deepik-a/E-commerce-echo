{
    "sourceFile": "controller/userController/checkoutcontroller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1736829758839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736829765271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n             key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" // Your Razorpay key_secret\r\n         });\r\n \r\n         const options = {\r\n-            amount: MtotalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n+            amount: Math.f;this.orderConformPagetotalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n             currency: 'INR',\r\n             receipt: \"receipt#1\"\r\n         };\r\n \r\n"
                },
                {
                    "date": 1736829784201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n \r\n exports.paymentRender = async (req, res) => {\r\n     try {\r\n         console.log(\"entered payment render\")\r\n-        const totalAmount = req.params.amount;\r\n+        const totalAmounts = req.params.amount;\r\n         console.log(`Received totalAmount: ${totalAmount}`); // Log totalAmount\r\n \r\n         if (!totalAmount) {\r\n             console.error('Amount parameter is missing');\r\n@@ -155,9 +155,9 @@\n             key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" // Your Razorpay key_secret\r\n         });\r\n \r\n         const options = {\r\n-            amount: Math.f;this.orderConformPagetotalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n+            amount: totalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n             currency: 'INR',\r\n             receipt: \"receipt#1\"\r\n         };\r\n \r\n"
                },
                {
                    "date": 1736829793352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n exports.paymentRender = async (req, res) => {\r\n     try {\r\n         console.log(\"entered payment render\")\r\n         const totalAmounts = req.params.amount;\r\n+        const \r\n         console.log(`Received totalAmount: ${totalAmount}`); // Log totalAmount\r\n \r\n         if (!totalAmount) {\r\n             console.error('Amount parameter is missing');\r\n"
                },
                {
                    "date": 1736829798723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n exports.paymentRender = async (req, res) => {\r\n     try {\r\n         console.log(\"entered payment render\")\r\n         const totalAmounts = req.params.amount;\r\n-        const \r\n+        const totalAmount=Math.\r\n         console.log(`Received totalAmount: ${totalAmount}`); // Log totalAmount\r\n \r\n         if (!totalAmount) {\r\n             console.error('Amount parameter is missing');\r\n"
                },
                {
                    "date": 1736829806431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n exports.paymentRender = async (req, res) => {\r\n     try {\r\n         console.log(\"entered payment render\")\r\n         const totalAmounts = req.params.amount;\r\n-        const totalAmount=Math.\r\n+        const totalAmount=Math.floor(totalAmounts )\r\n         console.log(`Received totalAmount: ${totalAmount}`); // Log totalAmount\r\n \r\n         if (!totalAmount) {\r\n             console.error('Amount parameter is missing');\r\n"
                },
                {
                    "date": 1736830358640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,9 +438,9 @@\n             });\r\n         }\r\n \r\n         // Reset cart coupon details\r\n-        cart.payableAmount = cart.totalPrice; // Reset the payable amount to the total price\r\n+        cart.payableAmount = cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctlye\r\n         cart.isCouponApplied = false;\r\n         cart.couponDiscount = 0;\r\n         cart.couponId = null;\r\n \r\n"
                },
                {
                    "date": 1736830364610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,9 +438,9 @@\n             });\r\n         }\r\n \r\n         // Reset cart coupon details\r\n-        cart.payableAmount = cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctlye\r\n+        cart.payableAmount = cart.totalPrice; // Reset the payable amount to the total price\r\n         cart.isCouponApplied = false;\r\n         cart.couponDiscount = 0;\r\n         cart.couponId = null;\r\n \r\n"
                },
                {
                    "date": 1736830372896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n             return res.status(400).json({ error: 'Cart is empty' });\r\n         }\r\n \r\n         // Calculate prices safely\r\n-        const totalPrices = cartItems.payableAmount || 0; // Default to 0 if undefined\r\n+        const totalPrices = cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctly\r\n         const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n \r\n         // Ensure valid total and discount\r\n         if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n"
                },
                {
                    "date": 1736830381316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n             return res.status(400).json({ error: 'Cart is empty' });\r\n         }\r\n \r\n         // Calculate prices safely\r\n-        const totalPrices = cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctly\r\n+        const totalPrices = cartItems.payableAmount || 0; // Default to 0 if undefined\r\n         const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n \r\n         // Ensure valid total and discount\r\n         if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n"
                },
                {
                    "date": 1736830411170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n             return res.status(400).json({ error: 'Cart is empty' });\r\n         }\r\n \r\n         // Calculate prices safely\r\n-        const totalPrices = cartItems.payableAmount || 0; // Default to 0 if undefined\r\n+        const totalPrices = cartItems.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctly\r\n         const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n \r\n         // Ensure valid total and discount\r\n         if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n"
                },
                {
                    "date": 1736830416294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n             return res.status(400).json({ error: 'Cart is empty' });\r\n         }\r\n \r\n         // Calculate prices safely\r\n-        const totalPrices = cartItems.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctly\r\n+        const totalPrices = cartItems.payableAmount > 0 ? cartItems.payableAmount : cartItems.totalPrice, // Ensure payableAmount is set correctly\r\n         const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n \r\n         // Ensure valid total and discount\r\n         if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n"
                },
                {
                    "date": 1736830424185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n             return res.status(400).json({ error: 'Cart is empty' });\r\n         }\r\n \r\n         // Calculate prices safely\r\n-        const totalPrices = cartItems.payableAmount > 0 ? cartItems.payableAmount : cartItems.totalPrice, // Ensure payableAmount is set correctly\r\n+        const totalPrices = cartItems.payableAmount > 0 ? cartItems.payableAmount : cartItems.totalPrice // Ensure payableAmount is set correctly\r\n         const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n \r\n         // Ensure valid total and discount\r\n         if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n"
                },
                {
                    "date": 1736830624761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,8 +536,9 @@\n             couponDiscount:cartItems.couponDiscount,\r\n         isCouponApplied: cartItems.isCouponApplied,\r\n             address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n             paymentMethod:\"Razorpay\",\r\n+            \r\n             paymentId: null,\r\n             isCancelled: false,\r\n         });\r\n \r\n"
                },
                {
                    "date": 1736830630096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,9 +536,9 @@\n             couponDiscount:cartItems.couponDiscount,\r\n         isCouponApplied: cartItems.isCouponApplied,\r\n             address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n             paymentMethod:\"Razorpay\",\r\n-            \r\n+            p\r\n             paymentId: null,\r\n             isCancelled: false,\r\n         });\r\n \r\n"
                },
                {
                    "date": 1736830635166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,9 +536,9 @@\n             couponDiscount:cartItems.couponDiscount,\r\n         isCouponApplied: cartItems.isCouponApplied,\r\n             address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n             paymentMethod:\"Razorpay\",\r\n-            p\r\n+            paymentsa\r\n             paymentId: null,\r\n             isCancelled: false,\r\n         });\r\n \r\n"
                },
                {
                    "date": 1736830646333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,9 +536,9 @@\n             couponDiscount:cartItems.couponDiscount,\r\n         isCouponApplied: cartItems.isCouponApplied,\r\n             address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n             paymentMethod:\"Razorpay\",\r\n-            paymentsa\r\n+            paymentStatus:\"P\"\r\n             paymentId: null,\r\n             isCancelled: false,\r\n         });\r\n \r\n"
                },
                {
                    "date": 1736831368702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,24 +536,24 @@\n             couponDiscount:cartItems.couponDiscount,\r\n         isCouponApplied: cartItems.isCouponApplied,\r\n             address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n             paymentMethod:\"Razorpay\",\r\n-            paymentStatus:\"P\"\r\n+            paymentStatus:\"Pending\",\r\n             paymentId: null,\r\n             isCancelled: false,\r\n         });\r\n \r\n         // Save the order\r\n         await newOrder.save();\r\n         \r\n         // Clear the user's cart\r\n-        // cart.items = [];\r\n-        // cart.payableAmount = 0;\r\n-        // cart.isCouponApplied = false;\r\n-        // cart.couponDiscount = 0;\r\n-        // cart.couponId = null;\r\n-        // cart.totalPrice = 0;\r\n-        // await cart.save();\r\n+        cart.items = [];\r\n+        cart.payableAmount = 0;\r\n+        cart.isCouponApplied = false;\r\n+        cart.couponDiscount = 0;\r\n+        cart.couponId = null;\r\n+        cart.totalPrice = 0;\r\n+        await cart.save();\r\n \r\n \r\n         // Render failed order page\r\n         res.render('user/failedOrder');\r\n"
                },
                {
                    "date": 1736831385030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -545,14 +545,14 @@\n         // Save the order\r\n         await newOrder.save();\r\n         \r\n         // Clear the user's cart\r\n-        cart.items = [];\r\n-        cart.payableAmount = 0;\r\n-        cart.isCouponApplied = false;\r\n-        cart.couponDiscount = 0;\r\n-        cart.couponId = null;\r\n-        cart.totalPrice = 0;\r\n+        car.items = [];\r\n+        car.payableAmount = 0;\r\n+        car.isCouponApplied = false;\r\n+        car.couponDiscount = 0;\r\n+        car.couponId = null;\r\n+        car.totalPrice = 0;\r\n         await cart.save();\r\n \r\n \r\n         // Render failed order page\r\n"
                },
                {
                    "date": 1736831498297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,9 @@\n         };\r\n \r\n         console.log('Order creation options:', options); // Log the options used for order creation\r\n \r\n+        \r\n         instance.orders.create(options, (error, order) => {\r\n             if (error) {\r\n                 console.error(`Failed to create order:`, error); // Log detailed error\r\n                 return res.status(500).json({ error: `Failed to create order: ${error.message}` });\r\n@@ -545,14 +546,14 @@\n         // Save the order\r\n         await newOrder.save();\r\n         \r\n         // Clear the user's cart\r\n-        car.items = [];\r\n-        car.payableAmount = 0;\r\n-        car.isCouponApplied = false;\r\n-        car.couponDiscount = 0;\r\n-        car.couponId = null;\r\n-        car.totalPrice = 0;\r\n+        cartItems.items = [];\r\n+        cartItems.payableAmount = 0;\r\n+        cartItems.isCouponApplied = false;\r\n+        cartItems.couponDiscount = 0;\r\n+        cartItems.couponId = null;\r\n+        cartItems.totalPrice = 0;\r\n         await cart.save();\r\n \r\n \r\n         // Render failed order page\r\n"
                },
                {
                    "date": 1736831503380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,10 @@\n         };\r\n \r\n         console.log('Order creation options:', options); // Log the options used for order creation\r\n \r\n-        \r\n+\r\n+        //razorpay orde\r\n         instance.orders.create(options, (error, order) => {\r\n             if (error) {\r\n                 console.error(`Failed to create order:`, error); // Log detailed error\r\n                 return res.status(500).json({ error: `Failed to create order: ${error.message}` });\r\n"
                },
                {
                    "date": 1736831510888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,12 +161,12 @@\n             currency: 'INR',\r\n             receipt: \"receipt#1\"\r\n         };\r\n \r\n-        console.log('Order creation options:', options); // Log the options used for order creation\r\n+        console.log('Order creation options:', options); \r\n \r\n \r\n-        //razorpay orde\r\n+        //razorpay order craetion\r\n         instance.orders.create(options, (error, order) => {\r\n             if (error) {\r\n                 console.error(`Failed to create order:`, error); // Log detailed error\r\n                 return res.status(500).json({ error: `Failed to create order: ${error.message}` });\r\n"
                },
                {
                    "date": 1736831518035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,18 +167,18 @@\n \r\n         //razorpay order craetion\r\n         instance.orders.create(options, (error, order) => {\r\n             if (error) {\r\n-                console.error(`Failed to create order:`, error); // Log detailed error\r\n+                console.error(`Failed to create order:`, error); \r\n                 return res.status(500).json({ error: `Failed to create order: ${error.message}` });\r\n             }\r\n \r\n-            console.log('Order created successfully:', order); // Log the order details\r\n+            console.log('Order created successfully:', order); \r\n             return res.status(200).json({ orderID: order.id });\r\n         });\r\n \r\n     } catch (error) {\r\n-        console.error(`Error on orders in checkout:`, error); // Log detailed error in catch block\r\n+        console.error(`Error on orders in checkout:`, error); \r\n         return res.status(500).json({ error: 'Internal server error' });\r\n     }\r\n };\r\n \r\n"
                },
                {
                    "date": 1736831525551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,13 +152,13 @@\n         }\r\n \r\n         const instance = new Razorpay({\r\n             key_id: \"rzp_test_KDYrLJHnu3O9Ip\", // Your Razorpay key_id\r\n-            key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" // Your Razorpay key_secret\r\n+            key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" \r\n         });\r\n \r\n         const options = {\r\n-            amount: totalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n+            amount: totalAmount*100,\r\n             currency: 'INR',\r\n             receipt: \"receipt#1\"\r\n         };\r\n \r\n"
                }
            ],
            "date": 1736829758839,
            "name": "Commit-0",
            "content": "\r\nconst User = require('../../model/userSchema');\r\nconst Cart = require('../../model/cartSchema');\r\nconst Order = require('../../model/orderSchema');\r\nconst Product = require('../../model/productSchema');\r\nconst Coupon = require('../../model/couponSchema')\r\nconst Wallet = require('../../model/walletSchema')\r\n\r\nconst  Razorpay = require('razorpay');\r\nconst { concurrency } = require('sharp');\r\nconst orderSchema = require('../../model/orderSchema');\r\nconst Category = require('../../model/categorySchema');\r\n\r\n//checkout validation\r\n\r\nexports.validateCheckout = async (req, res) => {\r\n    try {\r\n        if (!req.session.user) {\r\n            return res.status(401).json({ success: false, message: 'User not found, please log in again.' });\r\n        }\r\n\r\n        const userId = req.session.user;\r\n        const cartDetails = await Cart.findOne({ userId }).populate('items.productId');\r\n\r\n        console.log(\"carDetails of validate checkout\",cartDetails)\r\n\r\n        if (!cartDetails) {\r\n            return res.status(404).json({ success: false, message: 'Cart not found.' });\r\n        }\r\n\r\n        const items = cartDetails.items;\r\n        if (items.length === 0) {\r\n            return res.status(400).json({ success: false, message: 'Your cart is empty.' });\r\n        }\r\n\r\n        console.log(\"items of validate checkout\",items)\r\n\r\n        for (const item of items) {\r\n            const product = item.productId;\r\n            if (!product.isActive) {\r\n                return res.status(400).json({ success: false, message: `Product \"${product.name}\" is not available.` });\r\n            }\r\n\r\n            if (item.productCount > product.stock) {\r\n                return res.status(400).json({ success: false, message: `The quantity of \"${product.name}\" exceeds the available stock.` });\r\n            }\r\n        }\r\n\r\n        // If all checks pass\r\n        res.status(200).json({ success: true, message: 'Validation successful' });\r\n    } catch (error) {\r\n        console.error('Error during checkout validation:', error);\r\n        res.status(500).json({ success: false, message: 'Server Error. Please try again later.' });\r\n    }\r\n};\r\n\r\n\r\n\r\n//after validation,get the checkout page\r\nexports.getCheckoutPage = async (req,res) => {\r\n    try {\r\n   \r\n        if (!req.session.user) {\r\n            req.flash('error', \"User not found, please log in again\");\r\n            return res.redirect('/login');\r\n        }\r\n      \r\n      const userId = req.session.user;\r\n      const user = await User.findById(userId)\r\n\r\n      if (!user) {\r\n        return res.status(404).send('User not found');\r\n    }\r\n    \r\n    const cartDetails = await Cart.findOne({userId}).populate('items.productId');\r\n\r\n    if (!cartDetails) {\r\n        return res.status(404).send('Cart not found');\r\n    }\r\n    const items = cartDetails.items;\r\n    if (items.length === 0) {\r\n        return res.redirect('/cart');\r\n    }\r\n    for(const item of items){\r\n        if(!item.productId.isActive){\r\n            req.flash(\"error\", \"Product is not available, please remove it from the cart\");\r\n            return res.redirect(\"/cart\");\r\n        }\r\n    }\r\nconst availableCoupons = await Coupon.find({\r\n    isActive:true,\r\n    endDate:{$gte:new Date()},\r\n    minimumOrderAmount:{$lte:cartDetails.totalPrice}\r\n});\r\n\r\nconsole.log(\"getcheckoutpage\",availableCoupons)\r\n\r\nconst eligibleCoupons = availableCoupons.filter((coupon) =>{\r\n   const couponUsage =  user.couponUsed.find((c) =>{\r\n    c.couponId.equals(coupon._id)\r\n   })\r\n   if(couponUsage){\r\n    return couponUsage.usageCount < coupon.usageCount\r\n   }\r\n   return true\r\n});\r\n\r\nconsole.log(\"eligibleCoupons\",eligibleCoupons)\r\nlet wallet = await Wallet.findOne({ userID: userId });\r\n\r\n\r\n\r\nif (!wallet) {\r\n    wallet = { balance: 0, transaction: [] };\r\n}\r\n\r\nconsole.log(wallet,\"wallet of getcheckoutpage\");\r\n\r\n\r\nconst addresses = user ? user.address : []\r\n\r\n    return res.render('user/checkout',{\r\n        user,\r\n        cartDetails,\r\n        userDetails:user,\r\n        addresses,\r\n        eligibleCoupons,\r\n        wallet\r\n    })\r\n\r\n\r\n            \r\n        } catch (error) {\r\n            console.error('Error fetching addresses:', error);\r\n            res.status(500).send('Server Error');\r\n        }\r\n    \r\n}\r\n\r\n\r\n\r\nexports.paymentRender = async (req, res) => {\r\n    try {\r\n        console.log(\"entered payment render\")\r\n        const totalAmount = req.params.amount;\r\n        console.log(`Received totalAmount: ${totalAmount}`); // Log totalAmount\r\n\r\n        if (!totalAmount) {\r\n            console.error('Amount parameter is missing');\r\n            return res.status(404).json({ error: 'Amount parameter is missing' });\r\n        }\r\n\r\n        const instance = new Razorpay({\r\n            key_id: \"rzp_test_KDYrLJHnu3O9Ip\", // Your Razorpay key_id\r\n            key_secret: \"bcOjtnHN19lrbqBWdS35Ee7J\" // Your Razorpay key_secret\r\n        });\r\n\r\n        const options = {\r\n            amount: MtotalAmount*100, // Amount in smallest currency unit (e.g., paise for INR)\r\n            currency: 'INR',\r\n            receipt: \"receipt#1\"\r\n        };\r\n\r\n        console.log('Order creation options:', options); // Log the options used for order creation\r\n\r\n        instance.orders.create(options, (error, order) => {\r\n            if (error) {\r\n                console.error(`Failed to create order:`, error); // Log detailed error\r\n                return res.status(500).json({ error: `Failed to create order: ${error.message}` });\r\n            }\r\n\r\n            console.log('Order created successfully:', order); // Log the order details\r\n            return res.status(200).json({ orderID: order.id });\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(`Error on orders in checkout:`, error); // Log detailed error in catch block\r\n        return res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexports.placeOrder = async (req, res) => {\r\n    try {\r\n        console.log(\"Place Order\");\r\n\r\n        const userId = req.session.user;\r\n        const addressIndex = parseInt(req.params.address);\r\n        const paymentMode = parseInt(req.params.payment);\r\n        const { razorpay_payment_id, payment_status } = req.body;\r\n\r\n        // Retrieve the user's cart\r\n        const cart = await Cart.findOne({ userId }).populate('items.productId');\r\n        if (!cart || !cart.items || cart.items.length === 0) {\r\n            return res.status(400).json({ success: false, message: 'Your cart is empty or could not be found.' });\r\n        }\r\n\r\n        // Validate the user's address\r\n        const user = await User.findById(userId);\r\n        if (!user || !user.address || !user.address[addressIndex]) {\r\n            return res.status(400).json({ success: false, message: 'Selected address is not valid.' });\r\n        }\r\n\r\n        // Calculate total quantity of items in the cart\r\n        let totalQuantity = cart.items.reduce((sum, item) => sum + item.productCount, 0);\r\n        const amountToDeduct = cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice;\r\n\r\n\r\n        const paymentDetails = [\"Cash on Delivery\", \"Wallet\", \"Razorpay\"];\r\n        if(paymentDetails[paymentMode] === 'Cash on delivery'){\r\n            if(amountToDeduct > 1000){\r\n          return res.status(400).json({sucess:false,message:'COD below 1000 only.'})\r\n            }\r\n        }\r\n        \r\n        const paymentId = paymentMode === 2 ? razorpay_payment_id : 'RazorPay is not chosen as the payment method';\r\n\r\n        const newOrder = new Order({\r\n            userId,\r\n            orderId: Math.floor(Math.random() * 1000000),\r\n            items: cart.items,\r\n            totalQuantity,\r\n            totalPrice: cart.totalPrice,\r\n            couponCode: cart.couponId || null,\r\n            couponDiscount: cart.couponDiscount || 0,\r\n            payableAmount: cart.payableAmount > 0 ? cart.payableAmount : cart.totalPrice, // Ensure payableAmount is set correctly\r\n            address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n            paymentMethod: paymentDetails[paymentMode],\r\n            orderStatus: payment_status === \"Pending\" ? \"Pending\" : \"Paid\",\r\n            paymentId,\r\n            paymentStatus: payment_status,\r\n            isCancelled: false,\r\n            paid: paymentMode !== 0,\r\n        });\r\n\r\n        await newOrder.save();\r\n\r\n        // Handle wallet payment\r\n        if (paymentDetails[paymentMode] === 'Wallet') {\r\n            const wallet = await Wallet.findOne({ userID: userId });;\r\n            console.log(\" userId \", userId )\r\n            console.log(\"wallet\",wallet)\r\n          \r\n            console.log(\"cart.payableAmount\",amountToDeduct)\r\n            if (!wallet || wallet.balance < amountToDeduct) {\r\n                return res.status(400).json({ success: false, message: 'Insufficient wallet balance.' });\r\n            }\r\n\r\n            wallet.balance -= amountToDeduct;\r\n            wallet.transaction.push({\r\n                wallet_amount: amountToDeduct,\r\n                transactionType: 'Debited',\r\n                transaction_date: new Date(),\r\n                order_id: newOrder.orderId,\r\n            });\r\n\r\n            await wallet.save();\r\n        }\r\n\r\n      \r\n          // Update the order's payment status\r\n          newOrder.paymentStatus = \"Paid\";\r\n          newOrder.paid = true;\r\n          await newOrder.save();\r\n\r\n        // Update product stock\r\n        for (let item of cart.items) {\r\n            const product = await Product.findById(item.productId);\r\n            if (product) {\r\n                product.stock -= item.productCount;\r\n                await product.save();\r\n            }\r\n        }\r\n\r\n        // Update coupon usage\r\n        if (cart.isCouponApplied && cart.couponId) {\r\n            const coupon = await Coupon.findById(cart.couponId);\r\n            const couponUsage = user.couponUsed.find((usage) => usage.couponId.toString() === coupon._id.toString());\r\n\r\n            if (couponUsage) {\r\n                couponUsage.usageCount += 1;\r\n            } else {\r\n                user.couponUsed.push({\r\n                    couponId: coupon._id,\r\n                    usageCount: 1,\r\n                });\r\n            }\r\n\r\n            await user.save();\r\n        }\r\n\r\n        // Clear the user's cart\r\n        cart.items = [];\r\n        cart.payableAmount = 0;\r\n        cart.isCouponApplied = false;\r\n        cart.couponDiscount = 0;\r\n        cart.couponId = null;\r\n        cart.totalPrice = 0;\r\n\r\n        await cart.save();\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            message: 'Order placed successfully!',\r\n            order: newOrder,\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error during order placement: ${error.message}`);\r\n        return res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexports.applyCoupon = async (req, res) => {\r\n    try {\r\n        console.log(\"add apply coupon\");\r\n\r\n        const { couponCode } = req.body;\r\n        console.log(\"Received couponCode:\", couponCode);\r\n\r\n        const user = await User.findOne({ _id: req.session.user });\r\n        if (!user) {\r\n            return res.redirect(\"/login\");\r\n        }\r\n\r\n        const coupon = await Coupon.findById(couponCode);\r\n        if (!coupon) {\r\n            return res.status(400).json({\r\n                status: \"error\",\r\n                message: \"Coupon not found\",\r\n            });\r\n        }\r\n\r\n        if (!coupon.isActive) {\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message: 'Coupon not active',\r\n            });\r\n        }\r\n\r\n        if (new Date() > coupon.endDate) {\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message: 'Coupon expired',\r\n            });\r\n        }\r\n\r\n        const cart = await Cart.findOne({ userId: req.session.user });\r\n        if (!cart) {\r\n            return res.status(404).json({\r\n                status: 'error',\r\n                message: 'Cart not found',\r\n            });\r\n        }\r\n\r\n        const total = cart.totalPrice;\r\n        if (total < coupon.minimumOrderAmount) {\r\n            return res.status(409).json({\r\n                status: 'error',\r\n                message: \"Your order does not meet the minimum purchase requirement. Please add more items to your cart to proceed.\",\r\n            });\r\n        }\r\n\r\n        let discountedTotal = total;\r\n        let couponDiscount = coupon.discountValue;\r\n\r\n    let discountAmount = 0; // Declare discountAmount outside the block\r\n\r\nif (coupon.discountType === 'Fixed') {\r\n    discountedTotal = total - couponDiscount;\r\n} else if (coupon.discountType === 'Percentage') {\r\n    // Calculate the discount amount for percentage-based discount\r\n    discountAmount = (coupon.discountValue / 100) * total; \r\n    console.log(\"imp from apply coupont b\", discountAmount)\r\n    // Apply max discount if specified\r\n    couponDiscount = Math.min(discountAmount, coupon.maxDiscountAmount || discountAmount); \r\n\r\n    discountedTotal = total - couponDiscount;\r\n}\r\n\r\ncart.payableAmount = discountedTotal;\r\ncart.isCouponApplied = true;\r\ncart.couponDiscount = couponDiscount;\r\ncart.couponId = couponCode;\r\n\r\n\r\n\r\n\r\n        \r\n\r\n        await cart.save();\r\n\r\n        return res.status(200).json({\r\n            status: 'success',\r\n            message: 'Coupon applied',\r\n            total: discountedTotal,\r\n            couponDiscount,\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error from applyCoupon: ${error.message}`);\r\n        return res.status(500).json({ error: \"An error occurred while applying the coupon.\" });\r\n    }\r\n};\r\n\r\n\r\nexports.removeCoupon = async (req, res) => {\r\n    try {\r\n        // Check if the user is authenticated\r\n        const user = await User.findOne({ _id: req.session.user });\r\n        if (!user) {\r\n            return res.status(401).json({\r\n                status: \"error\",\r\n                message: \"User not authenticated. Please log in.\"\r\n            });\r\n        }\r\n\r\n        // Find the cart for the user\r\n        const cart = await Cart.findOne({ userId: req.session.user });\r\n        if (!cart) {\r\n            return res.status(404).json({\r\n                status: \"error\",\r\n                message: \"Cart not found\",\r\n            });\r\n        }\r\n\r\n        // If no coupon is applied, return an error\r\n        if (!cart.isCouponApplied) {\r\n            return res.status(400).json({\r\n                status: \"error\",\r\n                message: \"No coupon is applied to the cart.\",\r\n            });\r\n        }\r\n\r\n        // Reset cart coupon details\r\n        cart.payableAmount = cart.totalPrice; // Reset the payable amount to the total price\r\n        cart.isCouponApplied = false;\r\n        cart.couponDiscount = 0;\r\n        cart.couponId = null;\r\n\r\n        // Save the cart with updated details\r\n        await cart.save();\r\n\r\n        // Send a successful response with the updated total\r\n        return res.status(200).json({\r\n            status: \"success\",\r\n            message: \"Coupon removed successfully.\",\r\n            total: cart.payableAmount, // Send the updated payable amount\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error from removeCoupon: ${error.message}`);\r\n        // Return an error response if something goes wrong\r\n        return res.status(500).json({\r\n            status: \"error\",\r\n            message: \"An error occurred while removing the coupon.\",\r\n            error: error.message, // Include the error message for better debugging\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\n//to render the coupon page in user side\r\n\r\nexports.userCoupons = async (req,res) =>{\r\n    try {\r\n        const categories = await Category.find({isDeleted:false});\r\n        const coupons = await Coupon.find({isActive:true});\r\n\r\n\r\n        res.render('user/coupons',{\r\n            categories,\r\n            coupons:coupons\r\n        })\r\n    } catch (error) {\r\n        console.log(`error from userCoupons ${error}`)\r\n        return res.status(500).json({\r\n            error:'An error occured while loading1 the coupon page.'\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexports.failedOrder = async (req, res) => {\r\n    console.log(\"entered failed order\")\r\n    const addressIndex = parseInt(req.query.address); // Ensure this is an integer\r\n    const paymentMethod = req.query.paymentMethod;\r\nconsole.log(\"entered failed order addressIndex \",addressIndex)\r\nconsole.log(\"entered failed order paymentMethod\",paymentMethod)\r\n\r\n    try {\r\n        const userId = req.session.user;\r\n\r\n        // Validate user ID\r\n        if (!userId) {\r\n            return res.status(400).json({ error: 'User not found' });\r\n        }\r\n\r\n        // Fetch user and validate address\r\n        const user = await User.findById(userId);\r\n        if (!user || !user.address || !user.address[addressIndex]) {\r\n            return res.status(400).json({ error: 'Invalid address selected' });\r\n        }\r\n\r\n        // Fetch cart items\r\n        const cartItems = await Cart.findOne({ userId }).populate('items.productId');\r\n        if (!cartItems || cartItems.items.length === 0) {\r\n            return res.status(400).json({ error: 'Cart is empty' });\r\n        }\r\n\r\n        // Calculate prices safely\r\n        const totalPrices = cartItems.payableAmount || 0; // Default to 0 if undefined\r\n        const discountPrice = cartItems.discountPrice || 0; // Default to 0 if undefined\r\n\r\n        // Ensure valid total and discount\r\n        if (isNaN(totalPrices) || isNaN(discountPrice)) {\r\n            return res.status(400).json({ error: 'Invalid price calculation' });\r\n        }         \r\n        // Create new order\r\n        const newOrder = new Order({\r\n            userId: userId,\r\n            orderId: Math.floor(Math.random() * 1000000),\r\n            paid: false,\r\n            items: cartItems.items,\r\n            status: \"Pending\",\r\n            totalPrice:totalPrices,\r\n            payableAmount: totalPrices,\r\n            couponCode: cartItems.couponId,\r\n            couponDiscount:cartItems.couponDiscount,\r\n        isCouponApplied: cartItems.isCouponApplied,\r\n            address: `${user.address[addressIndex].building}, ${user.address[addressIndex].street}, ${user.address[addressIndex].city}, ${user.address[addressIndex].state}, ${user.address[addressIndex].country}, ${user.address[addressIndex].pincode}`,\r\n            paymentMethod:\"Razorpay\",\r\n            paymentId: null,\r\n            isCancelled: false,\r\n        });\r\n\r\n        // Save the order\r\n        await newOrder.save();\r\n        \r\n        // Clear the user's cart\r\n        // cart.items = [];\r\n        // cart.payableAmount = 0;\r\n        // cart.isCouponApplied = false;\r\n        // cart.couponDiscount = 0;\r\n        // cart.couponId = null;\r\n        // cart.totalPrice = 0;\r\n        // await cart.save();\r\n\r\n\r\n        // Render failed order page\r\n        res.render('user/failedOrder');\r\n    } catch (error) {\r\n        console.error(`Error from failedOrder: ${error}`);\r\n        return res.status(500).json({ error: 'Something went wrong' });\r\n    }\r\n};\r\n\r\n\r\n//order confirmation page\r\n\r\nexports.orderConformPage = async (req, res) => {\r\n    try {\r\n        const userId = req.session.user;\r\n        const user = await User.findById(userId);\r\n\r\n        const order = await Order.findOne({ userId }).sort({createdAt : -1}).limit(1)\r\n\r\n        res.render('user/conform-order', { order:order });\r\n    } catch (err) {\r\n        console.log(`Error on render in conform order ${err}`);\r\n    }\r\n}"
        }
    ]
}