{
    "sourceFile": "controller/userController/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1736400885000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736400899674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n     const check = await userSchema.findOne({ email: details.email });\r\n \r\n     if (check) {\r\n-      res.render(\"user/signu\");\r\n+      \r\n     } else {\r\n      const otp= generateotp()\r\n       sendOTP(details.email,otp);\r\n       req.session.otp = otp;\r\n"
                },
                {
                    "date": 1736400905234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n     const check = await userSchema.findOne({ email: details.email });\r\n \r\n     if (check) {\r\n-      \r\n+      res.redirect(\"/otp\");\r\n     } else {\r\n      const otp= generateotp()\r\n       sendOTP(details.email,otp);\r\n       req.session.otp = otp;\r\n"
                },
                {
                    "date": 1736401146860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,46 +26,10 @@\n     console.log(`error while renderin the page ${error}`);\r\n   }\r\n };\r\n \r\n-const signupPost = async (req, res) => {\r\n-  console.log(req.body)\r\n \r\n-  try {\r\n-    const details = {\r\n-      name: req.body.name,\r\n-      email: req.body.email,\r\n-      password: await bcrypt.hash(req.body.password, 10),\r\n-      confirmpassword: await bcrypt.hash(req.body.confirmpassword, 10),\r\n-      phone: req.body.phone,\r\n \r\n-    };\r\n-\r\n-    const check = await userSchema.findOne({ email: details.email });\r\n-\r\n-    if (check) {\r\n-      res.redirect(\"/otp\");\r\n-    } else {\r\n-     const otp= generateotp()\r\n-      sendOTP(details.email,otp);\r\n-      req.session.otp = otp;\r\n-      req.session.otpTime = Date.now();\r\n-      req.session.email = details.email;\r\n-      req.session.name = details.name;\r\n-      req.session.phone = details.phone;\r\n-      req.session.password = details.password;\r\n-      console.log(`Submitted OTP: ${req.body.otp}`);\r\n-      console.log(`Session OTP: ${req.session.otp}`);\r\n-      res.redirect(\"/otp\");\r\n-    }\r\n-  } catch (error) {\r\n-    console.log(`error while renderin the page ${error}`);\r\n-  }\r\n-\r\n-\r\n-};\r\n-\r\n-\r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n   }catch(error){\r\n"
                },
                {
                    "date": 1736402151458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,46 @@\n     console.log(`error while renderin the page ${error}`);\r\n   }\r\n };\r\n \r\n+const signupPost = async (req, res) => {\r\n+  try {\r\n+    const details = {\r\n+      name: req.body.name,\r\n+      email: req.body.email,\r\n+      password: await bcrypt.hash(req.body.password, 10),\r\n+      confirmpassword: await bcrypt.hash(req.body.confirmpassword, 10),\r\n+      phone: req.body.phone,\r\n+    };\r\n \r\n+    const check = await userSchema.findOne({ email: details.email });\r\n \r\n+    if (check) {\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"User already exists. Please login.\",\r\n+      });\r\n+    } else {\r\n+      const otp = generateotp();\r\n+      sendOTP(details.email, otp);\r\n+      req.session.otp = otp;\r\n+      req.session.otpTime = Date.now();\r\n+      req.session.email = details.email;\r\n+      req.session.name = details.name;\r\n+      req.session.phone = details.phone;\r\n+      req.session.password = details.password;\r\n+\r\n+      return res.status(200).json({\r\n+        success: true,\r\n+        redirectUrl: \"/otp\",\r\n+      });\r\n+    }\r\n+  } catch (error) {\r\n+   \r\n+  }\r\n+};\r\n+\r\n+\r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n   }catch(error){\r\n"
                },
                {
                    "date": 1736403177811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,16 +59,20 @@\n         redirectUrl: \"/otp\",\r\n       });\r\n     }\r\n   } catch (error) {\r\n-   \r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"An unexpected error occurred. Please try again later.\",\r\n+    });\r\n   }\r\n };\r\n \r\n \r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n+   \r\n   }catch(error){\r\n     console.log('error');\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1736403184706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,45 @@\n \r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n-   \r\n-  }catch(error){\r\n-    console.log('error');\r\n-  }\r\n-}\r\n+   const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n \r\n+   if (isOtpValid) {\r\n+     return res.json({\r\n+       success: true,\r\n+       message: \"OTP Verified\",\r\n+       redirectUrl: \"/next-step\", // Redirect to the next step after successful OTP verification\r\n+     });\r\n+   } else {\r\n+     // Check if the OTP time is expired\r\n+     const currentTime = new Date().getTime();\r\n+     const timeElapsed = currentTime - req.session.otpTime;\r\n+     const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n \r\n+     if (timeLeft <= 0) {\r\n+       return res.json({\r\n+         success: false,\r\n+         message: \"OTP expired. Please request a new one.\",\r\n+         timer: 0, // If OTP is expired\r\n+       });\r\n+     } else {\r\n+       return res.json({\r\n+         success: false,\r\n+         message: \"Invalid OTP.\",\r\n+         timer: timeLeft, // Send the remaining time in seconds\r\n+       });\r\n+     }\r\n+   }\r\n+ } catch (error) {\r\n+   console.error(\"Error during OTP verification:\", error);\r\n+   res.status(500).send(\"Server Error\");\r\n+ }\r\n+};\r\n \r\n+\r\n+\r\n+\r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n const otppost=async(req,res)=>{\r\n   // console.log(\"entered post\");\r\n"
                },
                {
                    "date": 1736403211475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n    if (isOtpValid) {\r\n      return res.json({\r\n        success: true,\r\n        message: \"OTP Verified\",\r\n-       redirectUrl: \"/next-step\", // Redirect to the next step after successful OTP verification\r\n+       redirectUrl: \"/next-ste\", // Redirect to the next step after successful OTP verification\r\n      });\r\n    } else {\r\n      // Check if the OTP time is expired\r\n      const currentTime = new Date().getTime();\r\n"
                },
                {
                    "date": 1736403211528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n    if (isOtpValid) {\r\n      return res.json({\r\n        success: true,\r\n        message: \"OTP Verified\",\r\n-       redirectUrl: \"/next-ste\", // Redirect to the next step after successful OTP verification\r\n+       redirectUrl: \"/next-st\", // Redirect to the next step after successful OTP verification\r\n      });\r\n    } else {\r\n      // Check if the OTP time is expired\r\n      const currentTime = new Date().getTime();\r\n"
                },
                {
                    "date": 1736403317651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n    if (isOtpValid) {\r\n      return res.json({\r\n        success: true,\r\n        message: \"OTP Verified\",\r\n-       redirectUrl: \"/next-st\", // Redirect to the next step after successful OTP verification\r\n+       redirectUrl: \"/logi\", // Redirect to the next step after successful OTP verification\r\n      });\r\n    } else {\r\n      // Check if the OTP time is expired\r\n      const currentTime = new Date().getTime();\r\n"
                },
                {
                    "date": 1736403323247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,88 +27,55 @@\n   }\r\n };\r\n \r\n const signupPost = async (req, res) => {\r\n+  console.log(req.body)\r\n+\r\n   try {\r\n     const details = {\r\n       name: req.body.name,\r\n       email: req.body.email,\r\n       password: await bcrypt.hash(req.body.password, 10),\r\n       confirmpassword: await bcrypt.hash(req.body.confirmpassword, 10),\r\n       phone: req.body.phone,\r\n+\r\n     };\r\n \r\n     const check = await userSchema.findOne({ email: details.email });\r\n \r\n     if (check) {\r\n-      return res.status(400).json({\r\n-        success: false,\r\n-        message: \"User already exists. Please login.\",\r\n-      });\r\n+      res.redirect(\"/log\");\r\n     } else {\r\n-      const otp = generateotp();\r\n-      sendOTP(details.email, otp);\r\n+     const otp= generateotp()\r\n+      sendOTP(details.email,otp);\r\n       req.session.otp = otp;\r\n       req.session.otpTime = Date.now();\r\n       req.session.email = details.email;\r\n       req.session.name = details.name;\r\n       req.session.phone = details.phone;\r\n       req.session.password = details.password;\r\n-\r\n-      return res.status(200).json({\r\n-        success: true,\r\n-        redirectUrl: \"/otp\",\r\n-      });\r\n+      console.log(`Submitted OTP: ${req.body.otp}`);\r\n+      console.log(`Session OTP: ${req.session.otp}`);\r\n+      res.redirect(\"/otp\");\r\n     }\r\n   } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      message: \"An unexpected error occurred. Please try again later.\",\r\n-    });\r\n+    console.log(`error while renderin the page ${error}`);\r\n   }\r\n+\r\n+\r\n };\r\n \r\n \r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n-   const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n+  }catch(error){\r\n+    console.log('error');\r\n+  }\r\n+}\r\n \r\n-   if (isOtpValid) {\r\n-     return res.json({\r\n-       success: true,\r\n-       message: \"OTP Verified\",\r\n-       redirectUrl: \"/logi\", // Redirect to the next step after successful OTP verification\r\n-     });\r\n-   } else {\r\n-     // Check if the OTP time is expired\r\n-     const currentTime = new Date().getTime();\r\n-     const timeElapsed = currentTime - req.session.otpTime;\r\n-     const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n \r\n-     if (timeLeft <= 0) {\r\n-       return res.json({\r\n-         success: false,\r\n-         message: \"OTP expired. Please request a new one.\",\r\n-         timer: 0, // If OTP is expired\r\n-       });\r\n-     } else {\r\n-       return res.json({\r\n-         success: false,\r\n-         message: \"Invalid OTP.\",\r\n-         timer: timeLeft, // Send the remaining time in seconds\r\n-       });\r\n-     }\r\n-   }\r\n- } catch (error) {\r\n-   console.error(\"Error during OTP verification:\", error);\r\n-   res.status(500).send(\"Server Error\");\r\n- }\r\n-};\r\n \r\n-\r\n-\r\n-\r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n const otppost=async(req,res)=>{\r\n   // console.log(\"entered post\");\r\n"
                },
                {
                    "date": 1736403328805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,48 +27,84 @@\n   }\r\n };\r\n \r\n const signupPost = async (req, res) => {\r\n-  console.log(req.body)\r\n-\r\n   try {\r\n     const details = {\r\n       name: req.body.name,\r\n       email: req.body.email,\r\n       password: await bcrypt.hash(req.body.password, 10),\r\n       confirmpassword: await bcrypt.hash(req.body.confirmpassword, 10),\r\n       phone: req.body.phone,\r\n-\r\n     };\r\n \r\n     const check = await userSchema.findOne({ email: details.email });\r\n \r\n     if (check) {\r\n-      res.redirect(\"/log\");\r\n+      return res.status(400).json({\r\n+        success: false,\r\n+        message: \"User already exists. Please login.\",\r\n+      });\r\n     } else {\r\n-     const otp= generateotp()\r\n-      sendOTP(details.email,otp);\r\n+      const otp = generateotp();\r\n+      sendOTP(details.email, otp);\r\n       req.session.otp = otp;\r\n       req.session.otpTime = Date.now();\r\n       req.session.email = details.email;\r\n       req.session.name = details.name;\r\n       req.session.phone = details.phone;\r\n       req.session.password = details.password;\r\n-      console.log(`Submitted OTP: ${req.body.otp}`);\r\n-      console.log(`Session OTP: ${req.session.otp}`);\r\n-      res.redirect(\"/otp\");\r\n+\r\n+      return res.status(200).json({\r\n+        success: true,\r\n+        redirectUrl: \"/otp\",\r\n+      });\r\n     }\r\n   } catch (error) {\r\n-    console.log(`error while renderin the page ${error}`);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: \"An unexpected error occurred. Please try again later.\",\r\n+    });\r\n   }\r\n-\r\n-\r\n };\r\n \r\n \r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n+    const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n+\r\n+    if (isOtpValid) {\r\n+      return res.json({\r\n+        success: true,\r\n+        message: \"OTP Verified\",\r\n+        redirectUrl: \"/next-step\", // Redirect to the next step after successful OTP verification\r\n+      });\r\n+    } else {\r\n+      // Check if the OTP time is expired\r\n+      const currentTime = new Date().getTime();\r\n+      const timeElapsed = currentTime - req.session.otpTime;\r\n+      const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n+\r\n+      if (timeLeft <= 0) {\r\n+        return res.json({\r\n+          success: false,\r\n+          message: \"OTP expired. Please request a new one.\",\r\n+          timer: 0, // If OTP is expired\r\n+        });\r\n+      } else {\r\n+        return res.json({\r\n+          success: false,\r\n+          message: \"Invalid OTP.\",\r\n+          timer: timeLeft, // Send the remaining time in seconds\r\n+        });\r\n+      }\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Error during OTP verification:\", error);\r\n+    res.status(500).send(\"Server Error\");\r\n+  }\r\n+};\r\n   }catch(error){\r\n     console.log('error');\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1736403391298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,41 +70,8 @@\n \r\n const otp=(req,res)=>{\r\n   try{\r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n-    const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n-\r\n-    if (isOtpValid) {\r\n-      return res.json({\r\n-        success: true,\r\n-        message: \"OTP Verified\",\r\n-        redirectUrl: \"/next-step\", // Redirect to the next step after successful OTP verification\r\n-      });\r\n-    } else {\r\n-      // Check if the OTP time is expired\r\n-      const currentTime = new Date().getTime();\r\n-      const timeElapsed = currentTime - req.session.otpTime;\r\n-      const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n-\r\n-      if (timeLeft <= 0) {\r\n-        return res.json({\r\n-          success: false,\r\n-          message: \"OTP expired. Please request a new one.\",\r\n-          timer: 0, // If OTP is expired\r\n-        });\r\n-      } else {\r\n-        return res.json({\r\n-          success: false,\r\n-          message: \"Invalid OTP.\",\r\n-          timer: timeLeft, // Send the remaining time in seconds\r\n-        });\r\n-      }\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\"Error during OTP verification:\", error);\r\n-    res.status(500).send(\"Server Error\");\r\n-  }\r\n-};\r\n   }catch(error){\r\n     console.log('error');\r\n   }\r\n }\r\n@@ -112,39 +79,11 @@\n \r\n \r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n-const otppost=async(req,res)=>{\r\n-  // console.log(\"entered post\");\r\n-  try{\r\n-    console.log(\"entered try\");\r\n-    if(req.body.otp===req.session.otp){\r\n-      console.log(\"entered 1st if\");\r\n-      const details = {\r\n-        name: req.session.name,\r\n-        email: req.session.email,\r\n-        password: await bcrypt.hash(req.session.password, 10),\r\n-        phone: req.session.phone,\r\n-      };\r\n-    await userSchema.insertMany([details])\r\n-    .then(()=>{\r\n-      console.log(`new user registeres successfully`)\r\n-      res.redirect('/login')\r\n-    }).catch((error)=>{\r\n-      console.log(`error while user signup ${error}`)\r\n-    })\r\n-    console.log(\"entered await\");\r\n-    }else{\r\n-      res.redirect('/otp')\r\n-    }\r\n- \r\n-  }catch (error) {\r\n-    console.log(`error while renderin the page ${error}`);\r\n-  }\r\n+c\r\n \r\n-}\r\n \r\n-\r\n //-------------------------------------- Otp Resent ---------------------------------\r\n \r\n const otpResend=(req,res)=>{\r\n \r\n"
                },
                {
                    "date": 1736403550439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,11 @@\n \r\n \r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n-c\r\n \r\n \r\n+\r\n //-------------------------------------- Otp Resent ---------------------------------\r\n \r\n const otpResend=(req,res)=>{\r\n \r\n"
                },
                {
                    "date": 1736404047054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,60 @@\n \r\n \r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n+const otppost = async (req, res) => {\r\n+  try {\r\n+    // Assuming you have your OTP verification logic here\r\n+    // Let's assume we have a function `verifyOtp()` that handles the verification\r\n+    const isOtpValid = \r\n \r\n+    if (isOtpValid) {\r\n+      // If valid, create a new user\r\n+      const details = {\r\n+        name: req.session.name,\r\n+        email: req.session.email,\r\n+        password: await bcrypt.hash(req.session.password, 10),  // Hashing the password\r\n+        phone: req.session.phone,\r\n+      };\r\n+      \r\n+      await userSchema.insertMany([details])\r\n+        .then(() => {\r\n+          console.log('New user registered successfully');\r\n+          res.redirect('/login');  // Redirect to login after successful registration\r\n+        })\r\n+        .catch((error) => {\r\n+          console.log(`Error while user signup: ${error}`);\r\n+          res.redirect('/otp');  // In case of any error, redirect back to OTP page\r\n+        });\r\n+    } else {\r\n+      // Check if the OTP time is expired\r\n+      const currentTime = new Date().getTime();\r\n+      const timeElapsed = currentTime - req.session.otpTime;\r\n+      const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n \r\n+      if (timeLeft <= 0) {\r\n+        return res.json({\r\n+          success: false,\r\n+          message: \"OTP expired. Please request a new one.\",\r\n+          timer: 0, // If OTP is expired\r\n+        });\r\n+      } else {\r\n+        return res.json({\r\n+          success: false,\r\n+          message: \"Invalid OTP.\",\r\n+          timer: timeLeft, // Send the remaining time in seconds\r\n+        });\r\n+      }\r\n+    }\r\n+  } catch (error) {\r\n+    console.log(`Error while processing the OTP: ${error}`);\r\n+    res.redirect('/otp');  // Handle any unexpected errors by redirecting to OTP page\r\n+  }\r\n+};\r\n \r\n+\r\n+\r\n //-------------------------------------- Otp Resent ---------------------------------\r\n \r\n const otpResend=(req,res)=>{\r\n \r\n"
                },
                {
                    "date": 1736404093385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,10 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    const isOtpValid = \r\n+    \r\n+    const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n \r\n     if (isOtpValid) {\r\n       // If valid, create a new user\r\n       const details = {\r\n"
                },
                {
                    "date": 1736404103395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,14 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n+    function verifyOtp(submittedOtp, storedOtp) {\r\n+      if (submittedOtp === storedOtp) {\r\n+        return true; // OTP is valid\r\n+      } else {\r\n+        return false; // OTP is invalid\r\n+      }\r\n     \r\n     const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n \r\n     if (isOtpValid) {\r\n"
                },
                {
                    "date": 1736404109368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         return true; // OTP is valid\r\n       } else {\r\n         return false; // OTP is invalid\r\n       }\r\n-    \r\n+    }\r\n     const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n \r\n     if (isOtpValid) {\r\n       // If valid, create a new user\r\n"
                },
                {
                    "date": 1736404116418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    function verifyOtp(submittedOtp, storedOtp) {\r\n+    function verifyOtp(submittedOt, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n         return false; // OTP is invalid\r\n"
                },
                {
                    "date": 1736404122712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    function verifyOtp(submittedOt, storedOtp) {\r\n+    function verifyOtp(req.body., storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n         return false; // OTP is invalid\r\n"
                },
                {
                    "date": 1736404129076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    function verifyOtp(req.body., storedOtp) {\r\n+    function verifyOtp(req.body.ot, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n         return false; // OTP is invalid\r\n"
                },
                {
                    "date": 1736404136507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,10 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    function verifyOtp(req.body.ot, storedOtp) {\r\n+    \r\n+    function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n         return false; // OTP is invalid\r\n"
                },
                {
                    "date": 1736404143294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    \r\n+    let submittedOtp\r\n     function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n"
                },
                {
                    "date": 1736404148689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    let submittedOtp\r\n+    let submittedOtp=req.body.\r\n     function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n"
                },
                {
                    "date": 1736404154140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,10 @@\n const otppost = async (req, res) => {\r\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    let submittedOtp=req.body.\r\n+    let submittedOtp=req.body.otp\\\r\n+    ldt\r\n     function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n"
                },
                {
                    "date": 1736404162346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n     let submittedOtp=req.body.otp\\\r\n-    ldt\r\n+    let storedOtp\r\n     function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n"
                },
                {
                    "date": 1736404167736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n   try {\r\n     // Assuming you have your OTP verification logic here\r\n     // Let's assume we have a function `verifyOtp()` that handles the verification\r\n     let submittedOtp=req.body.otp\\\r\n-    let storedOtp\r\n+    let storedOtp=req.session.o\r\n     function verifyOtp(submittedOtp, storedOtp) {\r\n       if (submittedOtp === storedOtp) {\r\n         return true; // OTP is valid\r\n       } else {\r\n"
                },
                {
                    "date": 1736404488464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,69 +79,12 @@\n \r\n \r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n-const otppost = async (req, res) => {\r\n-  try {\r\n-    // Assuming you have your OTP verification logic here\r\n-    // Let's assume we have a function `verifyOtp()` that handles the verification\r\n-    let submittedOtp=req.body.otp\\\r\n-    let storedOtp=req.session.o\r\n-    function verifyOtp(submittedOtp, storedOtp) {\r\n-      if (submittedOtp === storedOtp) {\r\n-        return true; // OTP is valid\r\n-      } else {\r\n-        return false; // OTP is invalid\r\n-      }\r\n-    }\r\n-    const isOtpValid = verifyOtp(req.body.otp, req.session.otp); \r\n \r\n-    if (isOtpValid) {\r\n-      // If valid, create a new user\r\n-      const details = {\r\n-        name: req.session.name,\r\n-        email: req.session.email,\r\n-        password: await bcrypt.hash(req.session.password, 10),  // Hashing the password\r\n-        phone: req.session.phone,\r\n-      };\r\n-      \r\n-      await userSchema.insertMany([details])\r\n-        .then(() => {\r\n-          console.log('New user registered successfully');\r\n-          res.redirect('/login');  // Redirect to login after successful registration\r\n-        })\r\n-        .catch((error) => {\r\n-          console.log(`Error while user signup: ${error}`);\r\n-          res.redirect('/otp');  // In case of any error, redirect back to OTP page\r\n-        });\r\n-    } else {\r\n-      // Check if the OTP time is expired\r\n-      const currentTime = new Date().getTime();\r\n-      const timeElapsed = currentTime - req.session.otpTime;\r\n-      const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000); \r\n \r\n-      if (timeLeft <= 0) {\r\n-        return res.json({\r\n-          success: false,\r\n-          message: \"OTP expired. Please request a new one.\",\r\n-          timer: 0, // If OTP is expired\r\n-        });\r\n-      } else {\r\n-        return res.json({\r\n-          success: false,\r\n-          message: \"Invalid OTP.\",\r\n-          timer: timeLeft, // Send the remaining time in seconds\r\n-        });\r\n-      }\r\n-    }\r\n-  } catch (error) {\r\n-    console.log(`Error while processing the OTP: ${error}`);\r\n-    res.redirect('/otp');  // Handle any unexpected errors by redirecting to OTP page\r\n-  }\r\n-};\r\n \r\n \r\n-\r\n //-------------------------------------- Otp Resent ---------------------------------\r\n \r\n const otpResend=(req,res)=>{\r\n \r\n"
                },
                {
                    "date": 1736405026158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n \r\n \r\n const otp=(req,res)=>{\r\n   try{\r\n+    \r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n   }catch(error){\r\n     console.log('error');\r\n   }\r\n@@ -79,12 +80,70 @@\n \r\n \r\n //------------------------------------ verify the otp -------------------------------\r\n \r\n+const otppost = async (req, res) => {\r\n+  try {\r\n+    // Assuming you have your OTP verification logic here\r\n+    // Let's assume we have a function `verifyOtp()` that handles the verification\r\n+    let submittedOtp = req.body.otp;\r\n+    let storedOtp = req.session.otp;\r\n \r\n+    function verifyOtp(submittedOtp, storedOtp) {\r\n+      if (submittedOtp === storedOtp) {\r\n+        return true; // OTP is valid\r\n+      } else {\r\n+        return false; // OTP is invalid\r\n+      }\r\n+    }\r\n \r\n+    const isOtpValid = verifyOtp(req.body.otp, req.session.otp);\r\n \r\n+    if (isOtpValid) {\r\n+      // If valid, create a new user\r\n+      const details = {\r\n+        name: req.session.name,\r\n+        email: req.session.email,\r\n+        password: await bcrypt.hash(req.session.password, 10),  // Hashing the password\r\n+        phone: req.session.phone,\r\n+      };\r\n \r\n+      await userSchema.insertMany([details])\r\n+        .then(() => {\r\n+          console.log('New user registered successfully');\r\n+          res.redirect('/login');  // Redirect to login after successful registration\r\n+        })\r\n+        .catch((error) => {\r\n+          console.log(`Error while user signup: ${error}`);\r\n+          res.redirect('/otp');  // In case of any error, redirect back to OTP page\r\n+        });\r\n+\r\n+    } else {\r\n+      // Check if the OTP time is expired\r\n+      const currentTime = new Date().getTime();\r\n+      const timeElapsed = currentTime - req.session.otpTime;\r\n+      const timeLeft = Math.max(0, req.session.otpExpiry - timeElapsed / 1000);\r\n+\r\n+      if (timeLeft <= 0) {\r\n+        // OTP has expired, redirect to /resend\r\n+        return res.redirect('/resend');\r\n+      } else {\r\n+        return res.json({\r\n+          success: false,\r\n+          message: \"Invalid OTP.\",\r\n+          timer: timeLeft, // Send the remaining time in seconds\r\n+        });\r\n+      }\r\n+    }\r\n+  } catch (error) {\r\n+    console.log(`Error while processing the OTP: ${error}`);\r\n+    res.redirect('/otp');  // Handle any unexpected errors by redirecting to OTP page\r\n+  }\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n //-------------------------------------- Otp Resent ---------------------------------\r\n \r\n const otpResend=(req,res)=>{\r\n \r\n"
                },
                {
                    "date": 1736405718033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n       req.session.name = details.name;\r\n       req.session.phone = details.phone;\r\n       req.session.password = details.password;\r\n \r\n+      \r\n+\r\n       return res.status(200).json({\r\n         success: true,\r\n         redirectUrl: \"/otp\",\r\n       });\r\n@@ -69,9 +71,8 @@\n \r\n \r\n const otp=(req,res)=>{\r\n   try{\r\n-    \r\n    res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n   }catch(error){\r\n     console.log('error');\r\n   }\r\n"
                },
                {
                    "date": 1736405742395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,12 @@\n       req.session.name = details.name;\r\n       req.session.phone = details.phone;\r\n       req.session.password = details.password;\r\n \r\n-      \r\n+            // Hash password before storing in session\r\n+            const hashedPassword = await bcrypt.hash(userDat.password, 10);\r\n+            userData.password = hashedPassword;\r\n+            req.session.userData = userData;\r\n \r\n       return res.status(200).json({\r\n         success: true,\r\n         redirectUrl: \"/otp\",\r\n"
                },
                {
                    "date": 1736405742480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n       req.session.phone = details.phone;\r\n       req.session.password = details.password;\r\n \r\n             // Hash password before storing in session\r\n-            const hashedPassword = await bcrypt.hash(userDa.password, 10);\r\n+            const hashedPassword = await bcrypt.hash(userD.password, 10);\r\n             userData.password = hashedPassword;\r\n             req.session.userData = userData;\r\n \r\n       return res.status(200).json({\r\n"
                }
            ],
            "date": 1736400885000,
            "name": "Commit-0",
            "content": "const userSchema = require(\"../../model/userSchema\");\r\nconst categorySchema=require('../../model/categorySchema')\r\nconst productSchema=require('../../model/productSchema')\r\n\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nconst sendOTP = require(\"../../services/emailSender\");\r\nconst generateotp = require(\"../../services/otpgenerator\");\r\n\r\nconst passport = require('passport')\r\nconst auth = require('../../services/passport')\r\n\r\n\r\n\r\nconst signup = (req, res) => {\r\n  try {\r\n    if (req.session.user) {\r\n      res.render(\"user/Landingpage\");\r\n    } else {\r\n      res.render(\"user/signup\", {\r\n        title: \"Please Signup\",\r\n        user: req.session.user,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(`error while renderin the page ${error}`);\r\n  }\r\n};\r\n\r\nconst signupPost = async (req, res) => {\r\n  console.log(req.body)\r\n\r\n  try {\r\n    const details = {\r\n      name: req.body.name,\r\n      email: req.body.email,\r\n      password: await bcrypt.hash(req.body.password, 10),\r\n      confirmpassword: await bcrypt.hash(req.body.confirmpassword, 10),\r\n      phone: req.body.phone,\r\n\r\n    };\r\n\r\n    const check = await userSchema.findOne({ email: details.email });\r\n\r\n    if (check) {\r\n      res.render(\"user/signu\");\r\n    } else {\r\n     const otp= generateotp()\r\n      sendOTP(details.email,otp);\r\n      req.session.otp = otp;\r\n      req.session.otpTime = Date.now();\r\n      req.session.email = details.email;\r\n      req.session.name = details.name;\r\n      req.session.phone = details.phone;\r\n      req.session.password = details.password;\r\n      console.log(`Submitted OTP: ${req.body.otp}`);\r\n      console.log(`Session OTP: ${req.session.otp}`);\r\n      res.redirect(\"/otp\");\r\n    }\r\n  } catch (error) {\r\n    console.log(`error while renderin the page ${error}`);\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\nconst otp=(req,res)=>{\r\n  try{\r\n   res.render('user/otp',{title:'OTP Verified',email: req.session.email,  otpTime: req.session.otpTime,}) \r\n  }catch(error){\r\n    console.log('error');\r\n  }\r\n}\r\n\r\n\r\n\r\n//------------------------------------ verify the otp -------------------------------\r\n\r\nconst otppost=async(req,res)=>{\r\n  // console.log(\"entered post\");\r\n  try{\r\n    console.log(\"entered try\");\r\n    if(req.body.otp===req.session.otp){\r\n      console.log(\"entered 1st if\");\r\n      const details = {\r\n        name: req.session.name,\r\n        email: req.session.email,\r\n        password: await bcrypt.hash(req.session.password, 10),\r\n        phone: req.session.phone,\r\n      };\r\n    await userSchema.insertMany([details])\r\n    .then(()=>{\r\n      console.log(`new user registeres successfully`)\r\n      res.redirect('/login')\r\n    }).catch((error)=>{\r\n      console.log(`error while user signup ${error}`)\r\n    })\r\n    console.log(\"entered await\");\r\n    }else{\r\n      res.redirect('/otp')\r\n    }\r\n \r\n  }catch (error) {\r\n    console.log(`error while renderin the page ${error}`);\r\n  }\r\n\r\n}\r\n\r\n\r\n//-------------------------------------- Otp Resent ---------------------------------\r\n\r\nconst otpResend=(req,res)=>{\r\n\r\n  try{\r\nconst email=req.session.email\r\nconst otp=generateotp()\r\nsendOTP(email,otp)\r\nreq.session.otp=otp\r\nreq.session.otpTime=Date.now()\r\nconsole.log(\"OTP sent succesfully\");\r\nres.redirect('/otp')\r\n  }catch(error){\r\n    console.log(`error while resend otp ${error}`)\r\n  }\r\n}\r\n\r\n\r\n// GET login page\r\nconst login = async (req, res) => {\r\n  try {\r\n    const categories = await categorySchema.find({ isDeleted: false });\r\n\r\n    if (req.session.user) {\r\n      // Fetch products only if the user is logged in\r\n      const products = await productSchema.find({ isActive: true });\r\n\r\n      // Render Landingpage with user session data\r\n      return res.render('user/Landingpage', {\r\n        categories,\r\n        user: req.session.user,\r\n        products,\r\n      });\r\n    }\r\n\r\n    // Render login page if no active session\r\n    res.render('user/login', { title: 'Login', user: null });\r\n  } catch (error) {\r\n    console.error(`Error in GET /login: ${error.message}`);\r\n    res.status(500).send('Internal Server Error');\r\n  }\r\n};\r\n\r\n// POST login form handler\r\nconst loginpost = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Find user by email\r\n    const user = await userSchema.findOne({ email });\r\n    if (!user) {\r\n      // Redirect if the user does not exist\r\n      return res.redirect('/login?error=userNotFound');\r\n    }\r\n\r\n    // Check if the user is blocked\r\n    if (user.isBlocked) {\r\n      return res.redirect('/login?error=blocked');\r\n    }\r\n\r\n    // Check if the password is correct\r\n    // const isMatch = await bcrypt.compare(password, user.password); // Assuming bcrypt is used\r\n    // if (!isMatch) {\r\n    //   return res.redirect('/login?error=invalidPassword');\r\n    // }\r\n\r\n    // Set session for the logged-in user\r\n    req.session.user = user;\r\n\r\n    // Fetch categories and products\r\n    const categories = await categorySchema.find({ isDeleted: false });\r\n    const products = await productSchema.find({ isActive: true });\r\n\r\n    // Debugging\r\n    console.log('User found and session set:', user);\r\n    console.log('Categories:', categories);\r\n    console.log('Products:', products);\r\n\r\n    // Redirect to the landing page after successful login\r\n    res.render('user/Landingpage', { categories, user, products });\r\n  } catch (error) {\r\n    console.error(`Error during login: ${error.message}`);\r\n    // Redirect to login with a generic error\r\n    res.redirect('/login?error=serverError');\r\n  }\r\n};\r\n\r\n\r\nconst logout = (req, res) => {\r\n  try {\r\n    req.session.destroy(error => {\r\n      if (error) {\r\n        console.log(`error while logout ${error}`)\r\n      }\r\n    })\r\n    res.redirect('/')\r\n  } catch (error) {\r\n    console.log(`error while logout user ${error}`)\r\n  }\r\n}\r\n\r\n\r\n// //-------------------------------------- google auth -----------------------------------\r\n\r\n// const googleAuth = (req, res) => {\r\n \r\n//   try {\r\n//     passport.authenticate('google', {\r\n//       scope: ['email', 'profile']\r\n//     })\r\n//   } catch (err) {\r\n//     console.log(`Error on google authentication ${err}`)\r\n//   }\r\n// }\r\n\r\n\r\n// //----------------------------------- google auth callback  ----------------------------\r\n\r\n// const googleAuthCallback = (req, res, next) => {\r\n//   console.log(\"googleAuthCallback\") \r\n//     passport.authenticate('google', { failureRedirect: '/' }),\r\n//     (req, res) => {\r\n//       res.render(\"user/home\");\r\n//     };\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n\r\n  signup,\r\n  signupPost,\r\n  otp,\r\n  otppost,\r\notpResend,\r\nlogin,\r\nloginpost,\r\nlogout,\r\n// googleAuth ,\r\n// googleAuthCallback\r\n};\r\n"
        }
    ]
}