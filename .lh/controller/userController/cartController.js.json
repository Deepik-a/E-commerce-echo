{
    "sourceFile": "controller/userController/cartController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736830873377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736831114691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \r\n     const currentDate = new Date(); \r\n \r\n     // Process each cart item\r\n-    const cartItems = await Promise.all( \r\n+    const cartItems = await Promise.all(  \r\n         cart.items.map(async (item) => {\r\n             // Fetch product details for the item\r\n             const product = await Product.findById(item.productId).populate('category');\r\n             if (!product) {\r\n"
                }
            ],
            "date": 1736830873377,
            "name": "Commit-0",
            "content": "const Cart = require('../../model/cartSchema');\r\nconst Product = require('../../model/productSchema');\r\nconst User = require('../../model/userSchema');\r\nconst offerModel = require('../../model/offerSchema'); // Update the path as necessary\r\n\r\nconst mongoose = require('mongoose'); // Ensure mongoose is required\r\n\r\nconst findOffer = async (cart) => {\r\n    if (!cart || !Array.isArray(cart.items)) {\r\n        console.error(\"findOffer: 'cart' or 'cart.items' is invalid\", cart);\r\n        return { cartItems: [] };\r\n    }\r\n\r\n    const currentDate = new Date(); /\r\n\r\n    // Process each cart item\r\n    const cartItems = await Promise.all(\r\n        cart.items.map(async (item) => {\r\n            // Fetch product details for the item\r\n            const product = await Product.findById(item.productId).populate('category');\r\n            if (!product) {\r\n                console.error(`Product with ID ${item.productId} not found`);\r\n                return { ...item.toObject(), offers: [] };\r\n            }\r\n\r\n            const categoryId = product.category?._id?.toString(); // Extract category ID\r\n\r\n            // Fetch applicable offers\r\n            const offers = await offerModel.find({\r\n                $and: [\r\n                    { isActive: true },\r\n                    { startDate: { $lte: currentDate } },\r\n                    { endDate: { $gte: currentDate } },\r\n                    {\r\n                        $or: [\r\n                            { applicableProduct: item.productId },\r\n                            { applicableCategory: categoryId }, // Use category ID here\r\n                        ]\r\n                    }\r\n                ]\r\n            });\r\n\r\n            console.log(\"Fetched offers for product:\", offers);\r\n            if (offers.length === 0) {\r\n                console.log(\"No valid offers found for product:\", item.productId);\r\n            }\r\n\r\n            return {\r\n                ...item.toObject(),\r\n                product, // Attach full product details\r\n                offers,  // Attach applicable offers\r\n            };\r\n        })\r\n    );\r\n\r\n   \r\n\r\n    // Calculate discounts for each item\r\n    cartItems.forEach((item) => {\r\n        if (item.offers.length > 0 && item.product.discount <= 50) {\r\n            // Prioritize product offer over category offer\r\n            const productOffer = item.offers.find((offer) => offer.offerType === 'products');\r\n            const categoryOffer = item.offers.find((offer) => offer.offerType === 'Category');\r\n\r\n            console.log(\"Product offer:\", productOffer, \"Category offer:\", categoryOffer);\r\n\r\n            // Determine the discount percentage\r\n            const discount = productOffer\r\n                ? productOffer.discountPercentage\r\n                : categoryOffer\r\n                ? categoryOffer.discountPercentage\r\n                : 0;\r\n\r\n            // Calculate the offer amount\r\n            const offerAmount = Math.round((item.product.price * discount) / 100);\r\n\r\n            // Update discountPrice for the product\r\n            item.product.finalPrice =\r\n                item.product.finalPrice !== undefined\r\n                    ? item.product.finalPrice - offerAmount\r\n                    : item.product.price - offerAmount;\r\n\r\n          \r\n        } else {\r\n            // Clear offers if no valid offer applies\r\n            item.offers = [];\r\n        }\r\n    });\r\n\r\n    return { cartItems };\r\n};\r\n\r\n\r\nconst addToCart = async (req, res) => {\r\n    console.log(\"Entered addToCart\");\r\n    const userId = req.session.user;\r\n    if (!userId) {\r\n        res.locals.alertMessage = \"User is not logged in, please log in again.\";\r\n        return res.redirect('/cart');\r\n    }\r\n\r\n    const productId = req.params.id;\r\n    const MAX_QUANTITY_LIMIT = 10; // Maximum limit per product\r\n\r\n    try {\r\n        const product = await Product.findById(productId);\r\n\r\n        if (!product) {\r\n            res.locals.alertMessage = \"Product not found.\";\r\n            return res.redirect(`/product/${productId}`);\r\n        }\r\n\r\n        // Check if the product is out of stock\r\n        if (product.stock <= 0) {\r\n            res.locals.alertMessage = \"Product is out of stock.\";\r\n            return res.redirect('/cart');\r\n        }\r\n\r\n        // Fetch or create the cart\r\n        let cart = await Cart.findOne({ userId }).populate('items.productId');\r\n\r\n        if (!cart) {\r\n            cart = new Cart({\r\n                userId,\r\n                items: [],\r\n                totalPrice: 0,\r\n            });\r\n        }\r\n\r\n        // Find or add the item in the cart\r\n        let cartItem = cart.items.find(item => item.productId.equals(product._id));\r\n\r\n        if (cartItem) {\r\n            if (\r\n                cartItem.productCount + 1 > product.stock || \r\n                cartItem.productCount + 1 > MAX_QUANTITY_LIMIT\r\n            ) {\r\n                res.locals.alertMessage = `Cannot add more than ${Math.min(product.stock, MAX_QUANTITY_LIMIT)} items to the cart.`;\r\n                return res.redirect('/cart');\r\n            } else {\r\n                cartItem.productCount += 1;\r\n            }\r\n        } else {\r\n            cart.items.push({\r\n                productId: product._id,\r\n                productCount: 1,\r\n                productPrice: product.finalPrice || product.price,\r\n                productImage: product.imgArray[0] || '/path-to-default-image.jpg'\r\n            });\r\n        }\r\n\r\n        // Calculate offers for the cart\r\n        const { cartItems } = await findOffer(cart);\r\n\r\n        // Update the cart items with calculated offers and prices\r\n        cart.items = cartItems.map(item => ({\r\n            productId: item.product._id,\r\n            productCount: item.productCount,\r\n            productPrice: item.product.finalPrice || item.product.price,\r\n            productImage: item.product.imgArray[0] || '/path-to-default-image.jpg'\r\n        }));\r\n\r\n       cart.totalPrice = cart.items.reduce((total, item) => total + (item.productPrice * item.productCount),0);\r\n        // Save the cart to the database\r\n        await cart.save();\r\n\r\n        return res.redirect('/cart');\r\n    } catch (error) {\r\n        console.error('Error adding to cart:', error.message);\r\n        return res.status(500).send('Server Error');\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Get cart\r\nconst getCart = async (req, res) => {\r\n   \r\n    const userId = req.session.user;\r\n    if (!userId) {\r\n        return res.render('user/login', { alertMessage: 'User not logged in' });\r\n    }\r\n  \r\n    try {\r\n        const cart = await Cart.findOne({ userId }).populate('items.productId');\r\n    \r\n        if (!cart || cart.length === 0) {\r\n            req.flash('info', 'Your cart is empty');\r\n            return res.render('user/cart', { cart: [] ,alertMessage: 'Your cart is empty'});\r\n        }\r\n\r\n        res.render('user/cart', { cart });\r\n    } catch (error) {\r\n        console.error('Error fetching cart:', error.message);\r\n        req.flash('error', 'Error fetching cart');\r\n        res.status(500).send('Server error');\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n// Remove product from cart\r\nconst removeFromCart = async (req, res) => {\r\n    const productId = req.params.id;\r\n    const userId = req.session.user; // Assuming user session contains userId\r\n\r\n    try {\r\n        const cart = await Cart.findOne({ userId });\r\n        if (!cart) {\r\n            return res.redirect('/cart');\r\n        }\r\n\r\n        // Filter out the product to remove it from the cart\r\n        cart.items = cart.items.filter(item => item.productId.toString() !== productId);\r\n        console.log(cart.items);\r\n       \r\n        cart.totalPrice = cart.items.reduce((total, item) => total + (item.productPrice * item.productCount),0);\r\n        await cart.save(); // Save the updated cart\r\n        res.redirect('/cart');\r\n    } catch (error) {\r\n        console.error('Error removing product from cart:', error);\r\n        res.status(500).send('Server error');\r\n    }\r\n};\r\n\r\n\r\nconst increment = async (req, res) => {\r\n    try {\r\n        console.log(\"Increment function called\");\r\n        const { productId } = req.body;\r\n        console.log(\"Request Body: \", req.body);\r\n        const userId = req.session.user;\r\n        console.log(\"User ID: \", userId);\r\n        const maxQuantity = 10;\r\n\r\n        // Validate request\r\n        if (!userId || !productId) {\r\n            return res.status(400).json({ success: false, message: 'Invalid request' });\r\n        }\r\n\r\n        // Find the product\r\n        const product = await Product.findById(productId);\r\n        if (!product) {\r\n            return res.status(404).json({ success: false, message: 'Product not found' });\r\n        }\r\n\r\n        // Find the user's cart\r\n        const cart = await Cart.findOne({ userId });\r\n        if (!cart) {\r\n            return res.status(404).json({ success: false, message: 'Cart not found' });\r\n        }\r\n\r\n        // Find the product in the cart\r\n        const index = cart.items.findIndex(p => p.productId.toString() === productId);\r\n        if (index === -1) {\r\n            return res.status(404).json({ success: false, message: 'Product not found in cart' });\r\n        }\r\n\r\n        // Check current product count\r\n        const currentCount = cart.items[index].productCount;\r\n\r\n        // Increment count\r\n        const newCount = currentCount + 1;\r\n\r\n        // Validate maximum quantity\r\n        if (newCount > maxQuantity) {\r\n            return res.status(400).json({ success: false, message: `Maximum quantity per product is ${maxQuantity}` });\r\n        }\r\n\r\n        // Validate available stock\r\n        if (newCount > product.stock) { // Changed from product.productCount to product.stock\r\n            return res.status(400).json({ success: false, message: `Available quantity of this product is ${product.stock}` });\r\n        }\r\n\r\n        // Update the product count in cart\r\n        cart.items[index].productCount = newCount;\r\n\r\n        // Calculate the updated total price\r\n        const updatedPrice = cart.items[index].productPrice * cart.items[index].productCount;\r\n\r\n        cart.totalPrice = cart.items.reduce((total, item) => total + (item.productPrice * item.productCount),0);\r\n        // Save the cart\r\n        await cart.save();\r\n\r\n        // Send success response with updated cart information\r\n        res.status(200).json({\r\n            success: true,\r\n            message: 'Product quantity updated successfully',\r\n            updatedCart: cart,\r\n            cartTotal: cart.items.reduce((total, item) => total + (item.productPrice * item.productCount), 0),\r\n            updatedPrice: updatedPrice\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error incrementing product quantity in cart: ${error}`);\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\n// //------------- Decrement Function ---------------\r\n\r\nconst decrement = async (req, res) => {\r\n    try {\r\n        const userId = req.session.user;\r\n        const { productId } = req.body;\r\n        if (!userId || !productId) {\r\n            return res.status(400).send('Invalid request');\r\n        }\r\n        const cart = await Cart.findOne({ userId });\r\n        if (!cart) {\r\n            return res.status(404).send('Cart not found');\r\n        }\r\n        const index = cart.items.findIndex(p => p.productId.toString() === productId);\r\n\r\n        if (index > -1) {\r\n            cart.items[index].productCount -= 1;\r\n            if (cart.items[index].productCount <= 0) {\r\n                cart.items[index].productCount = 1;\r\n            }\r\n            cart.totalPrice = cart.items.reduce((total, item) => total + (item.productPrice * item.productCount),0);\r\n            await cart.save();\r\n            res.status(200).json({\r\n                success: true,\r\n                cartTotal: cart.items.reduce((total, item) => total + (item.productPrice * item.productCount), 0),\r\n                updatedPrice: cart.items[index]?.productPrice * cart.items[index]?.productCount || 0});\r\n                disableButton: cart.items[index]?.productCount === 1 // Disable button when count is 1\r\n        } else {\r\n            res.status(404).send('Product not found in cart');\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error decrementing product quantity in cart: ${error}`);\r\n        showError(`Error decrementing product quantity in cart: ${error}`);\r\n        res.status(500).send('Internal server error');\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    addToCart,\r\n    getCart,\r\n    removeFromCart,\r\n    increment,\r\n    decrement,\r\n    findOffer \r\n};\r\n"
        }
    ]
}