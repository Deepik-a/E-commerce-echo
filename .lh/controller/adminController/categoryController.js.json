{
    "sourceFile": "controller/adminController/categoryController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1736751239502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736751269387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n \r\n module.exports = {\r\n     addCategory,\r\n     editCategory,\r\n-    renderEditCategoryForm,\r\n+   \r\n     geteditCategories,\r\n     getCategoriesForUser,\r\n     blockCategory,\r\n     unblockCategory \r\n"
                },
                {
                    "date": 1736751331597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,8 @@\n \r\n \r\n \r\n \r\n-\r\n // Block a category\r\n const blockCategory = async (req, res) => {\r\n   try {\r\n     const categoryId = req.params.id;\r\n@@ -204,9 +203,8 @@\n \r\n module.exports = {\r\n     addCategory,\r\n     editCategory,\r\n-   \r\n     geteditCategories,\r\n     getCategoriesForUser,\r\n     blockCategory,\r\n     unblockCategory \r\n"
                },
                {
                    "date": 1736751441450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,9 @@\n \r\n         if (existingCategory && existingCategory._id.toString() !== id) {\r\n             return res.status(400).json({ message: 'Category with this name already exists' });\r\n         }\r\n+        \r\n \r\n         // Update the category by ID\r\n         const updatedCategory = await categorySchema.findByIdAndUpdate(\r\n             id,\r\n@@ -135,11 +136,8 @@\n };\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n // Block a category\r\n const blockCategory = async (req, res) => {\r\n   try {\r\n     const categoryId = req.params.id;\r\n"
                }
            ],
            "date": 1736751239502,
            "name": "Commit-0",
            "content": "const categorySchema = require('../../model/categorySchema');\r\n\r\n// Add a category\r\nconst addCategory = async (req, res) => {\r\n  try {\r\n      const { name } = req.body;\r\n\r\n      // Validate the name\r\n      if (!name || typeof name !== 'string' || name.trim().length === 0) {\r\n          return res.status(400).json({ message: 'Category name cannot be empty' });\r\n      }\r\n\r\n      // Disallow names that are only numbers\r\n      const isOnlyNumbers = /^\\d+$/.test(name.trim());\r\n      if (isOnlyNumbers) {\r\n          return res.status(400).json({ message: 'Category name cannot contain only numbers' });\r\n      }\r\n\r\n      // Disallow invalid characters\r\n      const invalidCharsRegex = /[^a-zA-Z0-9\\s-]/;\r\n      if (invalidCharsRegex.test(name)) {\r\n          return res.status(400).json({ message: 'Category name contains invalid characters' });\r\n      }\r\n\r\n      // Check if category already exists\r\n      const existingCategory = await categorySchema.findOne({\r\n          name: { $regex: `^${name}$`, $options: 'i' }\r\n      });\r\n\r\n      if (existingCategory) {\r\n          return res.status(400).json({ message: 'Category already exists' });\r\n      }\r\n\r\n      // Create the new category\r\n      const newCategory = new categorySchema({ name });\r\n      await newCategory.save();\r\n\r\n      return res.status(200).json({ message: 'Category added successfully' });\r\n  } catch (error) {\r\n      console.error(`Error while adding category: ${error}`);\r\n      return res.status(500).json({ message: 'Failed to add category' });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nconst geteditCategories = async (req, res) => {\r\n  try {\r\n      // Get page and limit from query parameters, with defaults\r\n      const page = parseInt(req.query.page) || 1;\r\n      const limit = parseInt(req.query.limit) || 3;\r\n\r\n      // Calculate the number of documents to skip\r\n      const skip = (page - 1) * limit;\r\n\r\n      // Fetch paginated categories and the total count\r\n      const categories = await categorySchema\r\n          .find({})\r\n          .skip(skip)\r\n          .limit(limit);\r\n      const totalCategories = await categorySchema.countDocuments();\r\n\r\n      // Calculate total pages\r\n      const totalPages = Math.ceil(totalCategories / limit);\r\n\r\n      // Render the template with categories, pagination info\r\n      res.render('admin/Categorylist', {\r\n          categories,\r\n          currentPage: page,\r\n          totalPages,\r\n      });\r\n  } catch (error) {\r\n      console.error('Error rendering edit category page:', error);\r\n      res.status(500).send('Internal Server Error');\r\n  }\r\n};\r\n\r\n\r\n\r\n// Edit a category\r\nconst editCategory = async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { name } = req.body;\r\n\r\n        // Validate the name\r\n        if (!name || typeof name !== 'string' || name.trim().length === 0) {\r\n            return res.status(400).json({ message: 'Category name cannot be empty' });\r\n        }\r\n\r\n        // Disallow names that are only numbers\r\n        const isOnlyNumbers = /^\\d+$/.test(name.trim());\r\n        if (isOnlyNumbers) {\r\n            return res.status(400).json({ message: 'Category name cannot contain only numbers' });\r\n        }\r\n\r\n        // Disallow invalid characters\r\n        const invalidCharsRegex = /[^a-zA-Z0-9\\s-]/;\r\n        if (invalidCharsRegex.test(name)) {\r\n            return res.status(400).json({ message: 'Category name contains invalid characters' });\r\n        }\r\n\r\n        // Check if a category with the same name (case-insensitive) already exists\r\n        const existingCategory = await categorySchema.findOne({\r\n            name: { $regex: `^${name}$`, $options: 'i' },\r\n        });\r\n\r\n        if (existingCategory && existingCategory._id.toString() !== id) {\r\n            return res.status(400).json({ message: 'Category with this name already exists' });\r\n        }\r\n\r\n        // Update the category by ID\r\n        const updatedCategory = await categorySchema.findByIdAndUpdate(\r\n            id,\r\n            { name },\r\n            { new: true }\r\n        );\r\n\r\n        if (!updatedCategory) {\r\n            return res.status(404).json({ message: 'Category not found' });\r\n        }\r\n\r\n        // Send JSON response on successful update\r\n        return res.status(200).json({\r\n            message: 'Category updated successfully',\r\n            category: updatedCategory,\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(`Error while editing category: ${error}`);\r\n        // Send JSON response on error\r\n        return res.status(500).json({ message: 'An error occurred while updating the category' });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Block a category\r\nconst blockCategory = async (req, res) => {\r\n  try {\r\n    const categoryId = req.params.id;\r\n\r\n    // Find the category by ID and update isDeleted to true (blocked)\r\n    const category = await categorySchema.findByIdAndUpdate(\r\n      categoryId,\r\n      { isDeleted: true },\r\n      { new: true }\r\n    );\r\n\r\n    if (!category) {\r\n      return res.status(404).json({ message: 'Category not found' });\r\n    }\r\n\r\n    return res.status(200).json({ message: 'Category blocked', category });\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error blocking category', error });\r\n  }\r\n};\r\n\r\n// Unblock a category\r\nconst unblockCategory = async (req, res) => {\r\n  try {\r\n    const categoryId = req.params.id;\r\n\r\n    // Find the category by ID and update isDeleted to false (unblocked)\r\n    const category = await categorySchema.findByIdAndUpdate(\r\n      categoryId,\r\n      { isDeleted: false },\r\n      { new: true }\r\n    );\r\n\r\n    if (!category) {\r\n      return res.status(404).json({ message: 'Category not found' });\r\n    }\r\n\r\n    return res.status(200).json({ message: 'Category unblocked', category });\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error unblocking category', error });\r\n  }\r\n};\r\n\r\n\r\n\r\nconst getCategoriesForUser = async (req, res) => {\r\n\r\n    try {\r\n      \r\n        const categories = await categorySchema.find({ isDeleted: false });\r\n        res.json(categories); // This sets the content type to application/json\r\n    } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n        res.status(500).json({ message: 'Failed to fetch categories' });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    editCategory,\r\n    renderEditCategoryForm,\r\n    geteditCategories,\r\n    getCategoriesForUser,\r\n    blockCategory,\r\n    unblockCategory \r\n  \r\n};\r\n"
        }
    ]
}