{
    "sourceFile": "controller/adminController/orderController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1736658139922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736658145974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n     const limit = 5;\r\n     try {\r\n \r\n         const totalOrders = await Order.countDocuments(); \r\n-        const orders = await Order.find().sort({createdAt:-1}).populate()\r\n+        const orders = await Order.find().sort({createdAt:-1}).populate('')\r\n         .skip((page-1)*limit)\r\n         .limit(limit)\r\n         .populate('userId')\r\n         .populate('items.productId')\r\n"
                },
                {
                    "date": 1736658324550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+// const Order = require('../../model/orderSchema'); // Assuming you have an Order model\r\n+// const Product = require('../../model/productSchema'); // Assuming you have a Product model for stock management\r\n+// const mongoose = require('mongoose');\r\n+\r\n+\r\n+\r\n+\r\n+// // List all orders\r\n+// const listOrders = async (req, res) => {\r\n+//     try {\r\n+//         const orders = await Order.find()\r\n+//             .populate('userId') // Populating user details\r\n+//             .populate('items.productId'); // Populating product details within items\r\n+//         res.render('admin/order', { orders }); // Render orders to the admin page\r\n+//     } catch (error) {\r\n+//         console.error('Error fetching orders:', error);\r\n+//         res.status(500).send('Error fetching orders');\r\n+//     }\r\n+// };\r\n+\r\n+// // Change order status\r\n+// const changeProductStatus = async (req, res) => {\r\n+//     const { orderId, productId, status } = req.body;\r\n+\r\n+//     try {\r\n+//         // Define status transitions\r\n+//         const statusTransitions = {\r\n+//             'Pending': ['Shipped', 'Confirmed'],\r\n+//             'Confirmed': ['Delivered', 'Cancelled'],\r\n+//             'Shipped': ['Delivered', 'Returned'],\r\n+//             'Delivered': [],\r\n+//             'Cancelled': [],\r\n+//             'Returned': []\r\n+//         };\r\n+\r\n+//         // Find the order and populate product details to ensure full data\r\n+//         const order = await Order.findById(orderId).populate('items.productId');\r\n+\r\n+//         if (!order) {\r\n+//             return res.status(404).json({ message: 'Order not found' });\r\n+//         }\r\n+\r\n+//         // Find the specific item in the order\r\n+//         const itemIndex = order.items.findIndex(item => \r\n+//             item.productId._id.toString() === productId\r\n+//         );\r\n+\r\n+//         // Validate item exists\r\n+//         if (itemIndex === -1) {\r\n+//             return res.status(404).json({ message: 'Product not found in order' });\r\n+//         }\r\n+\r\n+//         // Current product item\r\n+//         const currentItem = order.items[itemIndex];\r\n+\r\n+//         // Check if the status transition is valid\r\n+//         const validTransitions = statusTransitions[currentItem.status] || [];\r\n+//         if (!validTransitions.includes(status)) {\r\n+//             return res.status(400).json({ \r\n+//                 message: `Invalid status transition from ${currentItem.status} to ${status}` \r\n+//             });\r\n+//         }\r\n+\r\n+//         // Update the individual product status\r\n+//         currentItem.status = status;\r\n+\r\n+//         // Optional: Update overall order status based on individual product statuses\r\n+//         const allStatuses = order.items.map(item => item.status);\r\n+//         const isAllDelivered = allStatuses.every(s => s === 'Delivered');\r\n+//         const isAllCancelled = allStatuses.every(s => s === 'Cancelled');\r\n+\r\n+//         if (isAllDelivered) {\r\n+//             order.status = 'Delivered';\r\n+//         } else if (isAllCancelled) {\r\n+//             order.status = 'Cancelled';\r\n+//         }\r\n+\r\n+//         // Save the updated order\r\n+//         await order.save();\r\n+\r\n+//         // Redirect or send response\r\n+//         res.redirect('/admin/orders');\r\n+//     } catch (error) {\r\n+//         console.error('Error updating product status:', error);\r\n+//         res.status(500).json({ \r\n+//             message: 'Error updating product status', \r\n+//             error: error.message \r\n+//         });\r\n+//     }\r\n+// };\r\n+\r\n+// // Cancel order and restore stock\r\n+// const cancelOrder = async (req, res) => {\r\n+//     const { orderId } = req.body;\r\n+//     try {\r\n+//         const order = await Order.findById(orderId);\r\n+//         if (order) {\r\n+//             // Update stock for each canceled item\r\n+//             for (const item of order.items) {\r\n+//                 await Product.findByIdAndUpdate(item.productId, {\r\n+//                     $inc: { stock: item.productCount }\r\n+//                 });\r\n+//             }\r\n+//             order.isCancel = true; // Set the order as canceled\r\n+//             order.status = 'Cancelled'; // Update status to 'Cancelled'\r\n+//             await order.save();\r\n+//             res.redirect(`/admin/orders/${orderId}`);\r\n+//         } else {\r\n+//             res.status(404).send('Order not found');\r\n+//         }\r\n+//     } catch (error) {\r\n+//         console.error('Error canceling order:', error);\r\n+//         res.status(500).send('Error canceling order');\r\n+//     }\r\n+// };\r\n+\r\n+\r\n+\r\n+\r\n+// // List products and inventory\r\n+// const listInventory = async (req, res) => {\r\n+//     try {\r\n+//         const products = await Product.find();\r\n+//         res.render('admin/inventory', { products }); // Render inventory to the admin page\r\n+//     } catch (error) {\r\n+//         console.error('Error fetching inventory:', error);\r\n+//         res.status(500).send('Error fetching inventory');\r\n+//     }\r\n+// };\r\n+\r\n+// // Update product stock\r\n+// const updateStock = async (req, res) => {\r\n+//     const { productId, stock } = req.body;\r\n+//     try {\r\n+//         const product = await Product.findById(productId);\r\n+//         if (product) {\r\n+//             product.stock = stock; // Update stock value\r\n+//             await product.save();\r\n+//             res.redirect('/admin/inventory');\r\n+//         } else {\r\n+//             res.status(404).send('Product not found');\r\n+//         }\r\n+//     } catch (error) {\r\n+//         console.error('Error updating stock:', error);\r\n+//         res.status(500).send('Error updating stock');\r\n+//     }\r\n+// };\r\n+\r\n+\r\n+\r\n+// // Controller to view order details\r\n+// const viewOrderDetails = async (req, res) => {\r\n+//     const { orderId } = req.params;\r\n+\r\n+//     try {\r\n+//         const order = await Order.findById(orderId).populate('userId', 'name email') // Get user details\r\n+//             .populate({\r\n+//                 path: 'items.productId',\r\n+//                 select: 'name price image' // Adjust these fields based on your product schema\r\n+//             });\r\n+\r\n+//         if (!order) {\r\n+//             return res.status(404).send('Order not found');\r\n+//         }\r\n+\r\n+//         // Render the order details EJS template\r\n+//         res.render('admin/orderDetail', { order });\r\n+//     } catch (error) {\r\n+//         console.error(error);\r\n+//         res.status(500).send('Server error');\r\n+//     }\r\n+// };\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+// module.exports={\r\n+//     listOrders,\r\n+//     changeProductStatus,\r\n+//     cancelOrder,\r\n+//     listInventory ,\r\n+//     updateStock ,\r\n+//     viewOrderDetails\r\n+// }\r\n+\r\n+\r\n+const Order = require('../../model/orderSchema');\r\n+const Product = require('../../model/productSchema');\r\n+const Wallet = require('../../model/walletSchema');\r\n+const User = require('../../model/userSchema');\r\n+exports.listOrders = async (req,res) => {\r\n+    const page = parseInt(req.query.page) || 1;\r\n+    const limit = 5;\r\n+    try {\r\n+\r\n+        const totalOrders = await Order.countDocuments(); \r\n+        const orders = await Order.find().sort({createdAt:-1}).populate('itemsproductId')\r\n+        .skip((page-1)*limit)\r\n+        .limit(limit)\r\n+        .populate('userId')\r\n+        .populate('items.productId')\r\n+        \r\n+        res.render('admin/order',{\r\n+            orders,\r\n+            currentPage:page,\r\n+            totalPages:Math.ceil(totalOrders/limit)\r\n+        })\r\n+    } catch (error) {\r\n+       console.log(`error from adminOrder ${error}`) \r\n+    }\r\n+}\r\n+\r\n+\r\n+exports.changeOrderStatus = async (req, res) => {\r\n+    const { orderId, productId, status } = req.body;\r\n+    console.log(\"req.body from changeorderstatus\",req.body)\r\n+\r\n+    try {\r\n+        const order = await Order.findById(orderId);\r\n+        \r\n+        if (!order) {\r\n+            return res.json({ success: false, error: \"Order not found\" });\r\n+        }\r\n+        \r\n+        // Find the product within the order and update its status\r\n+        const item = order.items.find(item => item.productId.toString() === productId);\r\n+        if (!item) {\r\n+            return res.json({ success: false, error: \"Product not found in the order\" });\r\n+        }\r\n+        \r\n+        item.status = status;\r\n+       if(item.status == 'Delivered'){\r\n+        order.status = 'Pending'\r\n+       }    \r\n+\r\n+        console.log(`product Status = ${item.status}`)\r\n+        await order.save();\r\n+        \r\n+        return res.json({ success: true });\r\n+    } catch (error) {\r\n+        console.error(\"Error updating status:\", error);\r\n+        return res.json({ success: false, error: \"Failed to update status\" });\r\n+    }\r\n+};\r\n+\r\n+\r\n+\r\n+\r\n+exports.viewOrderDetails = async (req, res) => {\r\n+    try {\r\n+        const orderId = req.params.id;\r\n+        const order = await Order.findById(orderId).populate('items.productId').exec();\r\n+\r\n+        if (!order) {\r\n+            return res.status(404).json({ message: 'Order not found' });\r\n+        }\r\n+\r\n+        res.json(order);\r\n+    } catch (error) {\r\n+        console.error(`Error from viewOrderDetails: ${error}`);\r\n+        res.status(500).json({ message: 'Internal Server Error' });\r\n+    }\r\n+};\r\n+\r\n+exports.viewReturnReason = async (req,res) =>{\r\n+    try {\r\n+        const {orderId,productId} = req.params;\r\n+        const order = await Order.findById(orderId).populate('items.productId');\r\n+\r\n+        const item = order.items.find(item => item.productId._id.toString() === productId);\r\n+\r\n+        if(item&&item.reasonForReturn){\r\n+            res.render('admin/returnReason', { order, item, reasonForReturn: item.reasonForReturn });\r\n+        }else{\r\n+            res.status(404).send('Return reason not found or item does not exist.');\r\n+        }\r\n+    } catch (error) {\r\n+       console.log(`error from viewReturnReason ${error}`) \r\n+       res.status(500).send('Error retrieving order details');\r\n+    }\r\n+}\r\n+\r\n+\r\n+exports.postViewReason = async(req,res) =>{\r\n+    const {orderId,productId} = req.params;\r\n+    const {action} = req.body;\r\n+    console.log(`action = ${action}`)\r\n+    try {\r\n+        const order = await Order.findById(orderId);\r\n+        const userId = await User.findById(order.userId);\r\n+        const item = order.items.find(item => item.productId._id.toString() === productId);\r\n+    console.log(`item = ${item}`)\r\n+        if(item){\r\n+            if(action === 'approve'){\r\n+                item.status = 'Returned';\r\n+                const userWallet = await Wallet.findOne({userID:userId});\r\n+                if(userWallet){\r\n+                    userWallet.balance = (userWallet.balance || 0) + order.payableAmount;\r\n+                    userWallet.transaction.push({\r\n+                        wallet_amount: order.payableAmount,\r\n+                        order_id: order.orderId,\r\n+                        transactionType: 'Credited',\r\n+                        transaction_date: new Date()\r\n+                    });\r\n+                    await userWallet.save();\r\n+                }else{\r\n+                    await Wallet.create({\r\n+                        userID: order.userId,\r\n+                        balance: order.payableAmount,\r\n+                        transaction: [{\r\n+                            wallet_amount: order.payableAmount,\r\n+                            order_id: order.orderId,\r\n+                            transactionType: 'Credited',\r\n+                            transaction_date: new Date()\r\n+                        }]\r\n+                    });   \r\n+                }\r\n+               \r\n+               \r\n+            }else if(action == 'reject'){   \r\n+                item.status = \"Rejected\"\r\n+        \r\n+      \r\n+            }else{\r\n+                res.status(400).send('Invalid action');\r\n+            }\r\n+        }else{\r\n+            res.status(404).send('Item not found');\r\n+        }\r\n+\r\n+        await order.save();\r\n+\r\n+        res.redirect('/admin/orders')\r\n+    } catch (error) {\r\n+        console.log(`error from postViewReason ${error}`)\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1736658139922,
            "name": "Commit-0",
            "content": "// const Order = require('../../model/orderSchema'); // Assuming you have an Order model\r\n// const Product = require('../../model/productSchema'); // Assuming you have a Product model for stock management\r\n// const mongoose = require('mongoose');\r\n\r\n\r\n\r\n\r\n// // List all orders\r\n// const listOrders = async (req, res) => {\r\n//     try {\r\n//         const orders = await Order.find()\r\n//             .populate('userId') // Populating user details\r\n//             .populate('items.productId'); // Populating product details within items\r\n//         res.render('admin/order', { orders }); // Render orders to the admin page\r\n//     } catch (error) {\r\n//         console.error('Error fetching orders:', error);\r\n//         res.status(500).send('Error fetching orders');\r\n//     }\r\n// };\r\n\r\n// // Change order status\r\n// const changeProductStatus = async (req, res) => {\r\n//     const { orderId, productId, status } = req.body;\r\n\r\n//     try {\r\n//         // Define status transitions\r\n//         const statusTransitions = {\r\n//             'Pending': ['Shipped', 'Confirmed'],\r\n//             'Confirmed': ['Delivered', 'Cancelled'],\r\n//             'Shipped': ['Delivered', 'Returned'],\r\n//             'Delivered': [],\r\n//             'Cancelled': [],\r\n//             'Returned': []\r\n//         };\r\n\r\n//         // Find the order and populate product details to ensure full data\r\n//         const order = await Order.findById(orderId).populate('items.productId');\r\n\r\n//         if (!order) {\r\n//             return res.status(404).json({ message: 'Order not found' });\r\n//         }\r\n\r\n//         // Find the specific item in the order\r\n//         const itemIndex = order.items.findIndex(item => \r\n//             item.productId._id.toString() === productId\r\n//         );\r\n\r\n//         // Validate item exists\r\n//         if (itemIndex === -1) {\r\n//             return res.status(404).json({ message: 'Product not found in order' });\r\n//         }\r\n\r\n//         // Current product item\r\n//         const currentItem = order.items[itemIndex];\r\n\r\n//         // Check if the status transition is valid\r\n//         const validTransitions = statusTransitions[currentItem.status] || [];\r\n//         if (!validTransitions.includes(status)) {\r\n//             return res.status(400).json({ \r\n//                 message: `Invalid status transition from ${currentItem.status} to ${status}` \r\n//             });\r\n//         }\r\n\r\n//         // Update the individual product status\r\n//         currentItem.status = status;\r\n\r\n//         // Optional: Update overall order status based on individual product statuses\r\n//         const allStatuses = order.items.map(item => item.status);\r\n//         const isAllDelivered = allStatuses.every(s => s === 'Delivered');\r\n//         const isAllCancelled = allStatuses.every(s => s === 'Cancelled');\r\n\r\n//         if (isAllDelivered) {\r\n//             order.status = 'Delivered';\r\n//         } else if (isAllCancelled) {\r\n//             order.status = 'Cancelled';\r\n//         }\r\n\r\n//         // Save the updated order\r\n//         await order.save();\r\n\r\n//         // Redirect or send response\r\n//         res.redirect('/admin/orders');\r\n//     } catch (error) {\r\n//         console.error('Error updating product status:', error);\r\n//         res.status(500).json({ \r\n//             message: 'Error updating product status', \r\n//             error: error.message \r\n//         });\r\n//     }\r\n// };\r\n\r\n// // Cancel order and restore stock\r\n// const cancelOrder = async (req, res) => {\r\n//     const { orderId } = req.body;\r\n//     try {\r\n//         const order = await Order.findById(orderId);\r\n//         if (order) {\r\n//             // Update stock for each canceled item\r\n//             for (const item of order.items) {\r\n//                 await Product.findByIdAndUpdate(item.productId, {\r\n//                     $inc: { stock: item.productCount }\r\n//                 });\r\n//             }\r\n//             order.isCancel = true; // Set the order as canceled\r\n//             order.status = 'Cancelled'; // Update status to 'Cancelled'\r\n//             await order.save();\r\n//             res.redirect(`/admin/orders/${orderId}`);\r\n//         } else {\r\n//             res.status(404).send('Order not found');\r\n//         }\r\n//     } catch (error) {\r\n//         console.error('Error canceling order:', error);\r\n//         res.status(500).send('Error canceling order');\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\n// // List products and inventory\r\n// const listInventory = async (req, res) => {\r\n//     try {\r\n//         const products = await Product.find();\r\n//         res.render('admin/inventory', { products }); // Render inventory to the admin page\r\n//     } catch (error) {\r\n//         console.error('Error fetching inventory:', error);\r\n//         res.status(500).send('Error fetching inventory');\r\n//     }\r\n// };\r\n\r\n// // Update product stock\r\n// const updateStock = async (req, res) => {\r\n//     const { productId, stock } = req.body;\r\n//     try {\r\n//         const product = await Product.findById(productId);\r\n//         if (product) {\r\n//             product.stock = stock; // Update stock value\r\n//             await product.save();\r\n//             res.redirect('/admin/inventory');\r\n//         } else {\r\n//             res.status(404).send('Product not found');\r\n//         }\r\n//     } catch (error) {\r\n//         console.error('Error updating stock:', error);\r\n//         res.status(500).send('Error updating stock');\r\n//     }\r\n// };\r\n\r\n\r\n\r\n// // Controller to view order details\r\n// const viewOrderDetails = async (req, res) => {\r\n//     const { orderId } = req.params;\r\n\r\n//     try {\r\n//         const order = await Order.findById(orderId).populate('userId', 'name email') // Get user details\r\n//             .populate({\r\n//                 path: 'items.productId',\r\n//                 select: 'name price image' // Adjust these fields based on your product schema\r\n//             });\r\n\r\n//         if (!order) {\r\n//             return res.status(404).send('Order not found');\r\n//         }\r\n\r\n//         // Render the order details EJS template\r\n//         res.render('admin/orderDetail', { order });\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         res.status(500).send('Server error');\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// module.exports={\r\n//     listOrders,\r\n//     changeProductStatus,\r\n//     cancelOrder,\r\n//     listInventory ,\r\n//     updateStock ,\r\n//     viewOrderDetails\r\n// }\r\n\r\n\r\nconst Order = require('../../model/orderSchema');\r\nconst Product = require('../../model/productSchema');\r\nconst Wallet = require('../../model/walletSchema');\r\nconst User = require('../../model/userSchema');\r\nexports.listOrders = async (req,res) => {\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = 5;\r\n    try {\r\n\r\n        const totalOrders = await Order.countDocuments(); \r\n        const orders = await Order.find().sort({createdAt:-1}).\r\n        .skip((page-1)*limit)\r\n        .limit(limit)\r\n        .populate('userId')\r\n        .populate('items.productId')\r\n        \r\n        res.render('admin/order',{\r\n            orders,\r\n            currentPage:page,\r\n            totalPages:Math.ceil(totalOrders/limit)\r\n        })\r\n    } catch (error) {\r\n       console.log(`error from adminOrder ${error}`) \r\n    }\r\n}\r\n\r\n\r\nexports.changeOrderStatus = async (req, res) => {\r\n    const { orderId, productId, status } = req.body;\r\n    console.log(\"req.body from changeorderstatus\",req.body)\r\n\r\n    try {\r\n        const order = await Order.findById(orderId);\r\n        \r\n        if (!order) {\r\n            return res.json({ success: false, error: \"Order not found\" });\r\n        }\r\n        \r\n        // Find the product within the order and update its status\r\n        const item = order.items.find(item => item.productId.toString() === productId);\r\n        if (!item) {\r\n            return res.json({ success: false, error: \"Product not found in the order\" });\r\n        }\r\n        \r\n        item.status = status;\r\n       if(item.status == 'Delivered'){\r\n        order.status = 'Pending'\r\n       }    \r\n\r\n        console.log(`product Status = ${item.status}`)\r\n        await order.save();\r\n        \r\n        return res.json({ success: true });\r\n    } catch (error) {\r\n        console.error(\"Error updating status:\", error);\r\n        return res.json({ success: false, error: \"Failed to update status\" });\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexports.viewOrderDetails = async (req, res) => {\r\n    try {\r\n        const orderId = req.params.id;\r\n        const order = await Order.findById(orderId).populate('items.productId').exec();\r\n\r\n        if (!order) {\r\n            return res.status(404).json({ message: 'Order not found' });\r\n        }\r\n\r\n        res.json(order);\r\n    } catch (error) {\r\n        console.error(`Error from viewOrderDetails: ${error}`);\r\n        res.status(500).json({ message: 'Internal Server Error' });\r\n    }\r\n};\r\n\r\nexports.viewReturnReason = async (req,res) =>{\r\n    try {\r\n        const {orderId,productId} = req.params;\r\n        const order = await Order.findById(orderId).populate('items.productId');\r\n\r\n        const item = order.items.find(item => item.productId._id.toString() === productId);\r\n\r\n        if(item&&item.reasonForReturn){\r\n            res.render('admin/returnReason', { order, item, reasonForReturn: item.reasonForReturn });\r\n        }else{\r\n            res.status(404).send('Return reason not found or item does not exist.');\r\n        }\r\n    } catch (error) {\r\n       console.log(`error from viewReturnReason ${error}`) \r\n       res.status(500).send('Error retrieving order details');\r\n    }\r\n}\r\n\r\n\r\nexports.postViewReason = async(req,res) =>{\r\n    const {orderId,productId} = req.params;\r\n    const {action} = req.body;\r\n    console.log(`action = ${action}`)\r\n    try {\r\n        const order = await Order.findById(orderId);\r\n        const userId = await User.findById(order.userId);\r\n        const item = order.items.find(item => item.productId._id.toString() === productId);\r\n    console.log(`item = ${item}`)\r\n        if(item){\r\n            if(action === 'approve'){\r\n                item.status = 'Returned';\r\n                const userWallet = await Wallet.findOne({userID:userId});\r\n                if(userWallet){\r\n                    userWallet.balance = (userWallet.balance || 0) + order.payableAmount;\r\n                    userWallet.transaction.push({\r\n                        wallet_amount: order.payableAmount,\r\n                        order_id: order.orderId,\r\n                        transactionType: 'Credited',\r\n                        transaction_date: new Date()\r\n                    });\r\n                    await userWallet.save();\r\n                }else{\r\n                    await Wallet.create({\r\n                        userID: order.userId,\r\n                        balance: order.payableAmount,\r\n                        transaction: [{\r\n                            wallet_amount: order.payableAmount,\r\n                            order_id: order.orderId,\r\n                            transactionType: 'Credited',\r\n                            transaction_date: new Date()\r\n                        }]\r\n                    });   \r\n                }\r\n               \r\n               \r\n            }else if(action == 'reject'){   \r\n                item.status = \"Rejected\"\r\n        \r\n      \r\n            }else{\r\n                res.status(400).send('Invalid action');\r\n            }\r\n        }else{\r\n            res.status(404).send('Item not found');\r\n        }\r\n\r\n        await order.save();\r\n\r\n        res.redirect('/admin/orders')\r\n    } catch (error) {\r\n        console.log(`error from postViewReason ${error}`)\r\n    }\r\n}"
        }
    ]
}