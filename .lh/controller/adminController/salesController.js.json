{
    "sourceFile": "controller/adminController/salesController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736826897828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736826897828,
            "name": "Commit-0",
            "content": "const Order = require('../../model/orderSchema')\r\nconst xlsx = require('xlsx');\r\nconst PDFDocument = require('pdfkit')\r\n\r\n\r\n\r\nconst applyDateFilter = (filter) => {\r\n    console.log(\" entered apply date filter\")\r\n    const now = new Date();\r\n    let dateFilter = {};\r\n  \r\n    if (filter === 'day') {\r\n      dateFilter.createdAt = {\r\n        $gte: new Date(now.setHours(0, 0, 0, 0)),\r\n        $lt: new Date(now.setHours(23, 59, 59, 999)),\r\n      };\r\n    } else if (filter === 'week') {\r\n      const startOfWeek = new Date(now);\r\n      const dayOfWeek = now.getDay(); \r\n      const distanceToMonday = (dayOfWeek === 0 ? 6 : dayOfWeek - 1); \r\n     \r\n      startOfWeek.setDate(now.getDate() - distanceToMonday);\r\n      startOfWeek.setHours(0, 0, 0, 0);\r\n  \r\n      // Set end of the week \r\n      const endOfWeek = new Date(startOfWeek);\r\n      endOfWeek.setDate(startOfWeek.getDate() + 6);\r\n      endOfWeek.setHours(23, 59, 59, 999);\r\n  \r\n      dateFilter.createdAt = { $gte: startOfWeek, $lt: endOfWeek };\r\n    } else if (filter === 'month') {\r\n      dateFilter.createdAt = {\r\n        $gte: new Date(now.getFullYear(), now.getMonth(), 1), // Start of month\r\n        $lt: new Date(now.getFullYear(), now.getMonth() + 1, 1), // Start of next month\r\n      };\r\n    } else if (filter === 'year') {\r\n      dateFilter.createdAt = {\r\n        $gte: new Date(now.getFullYear(), 0, 1), // Start of year\r\n        $lt: new Date(now.getFullYear(), 12, 31), // End of year\r\n      };\r\n    }\r\n  \r\n    return dateFilter;  \r\n  };\r\n\r\n\r\n  exports.sales = async (req, res) => {\r\n    try {\r\n        const filter = req.query.filter || ''; \r\n        const page = parseInt(req.query.page, 10) || 1;\r\n        const limit = parseInt(req.query.limit, 10) || 10;\r\n        const skip = (page - 1) * limit;\r\n\r\n        console.log(\"page = \", page);\r\n        console.log(\"limit = \", limit);\r\n\r\n        let queryCondition = {status: {$in: [\"Pending\", \"Paid\", \"Delivered\", ]}}; // Ensure initial condition for paid orders\r\n\r\n        // If a filter is provided, apply it to the query condition\r\n        if (filter) {\r\n            const dateFilter = applyDateFilter(filter);\r\n            queryCondition = { ...queryCondition, ...dateFilter };\r\n        }\r\n\r\n        // Fetch the filtered sales data with pagination and virtuals\r\n        const salesData = await Order.find(queryCondition)\r\n            .sort({ createdAt: -1 })\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .populate('items.productId');  // Populate product data if needed\r\n\r\n        const totalRecords = await Order.countDocuments(queryCondition);\r\n\r\n        // Fetch all sales data to calculate totals\r\n        const totSalesData = await Order.find(queryCondition).populate('items.productId');\r\n\r\n        // Calculate the total order amount from the virtual field `totalPrice`\r\n        let orderAmount = totSalesData.reduce((tot, val) => {\r\n            return tot += val.totalPrice;\r\n        }, 0);\r\n\r\n        // Calculate the total coupon discount\r\n        let totalCouponDiscount = totSalesData.reduce((tot, val) => {\r\n            return Math.abs(tot += val.couponDiscount);\r\n        }, 0);\r\n\r\n        // Calculate the total sales count\r\n        let totalSalesCount = totSalesData.length;\r\n\r\n        console.log(\"Total sales count: \", totalSalesCount);\r\n        console.log(\"Order amount: \", orderAmount);\r\n\r\n        if (req.xhr || req.headers.accept.indexOf('json') > -1) {\r\n            return res.json({\r\n                data: salesData,\r\n                currentPage: page,\r\n                totalPages: Math.ceil(totalRecords / limit),\r\n                totalRecordsCount: totalRecords,\r\n                overallSalesCount: totalSalesCount,\r\n                overallOrderAmount: orderAmount,\r\n                totalCouponDiscount: totalCouponDiscount\r\n            });\r\n        } else {\r\n            res.render('admin/salesReport', {\r\n                data: salesData,\r\n                currentPage: page,\r\n                totalPages: Math.ceil(totalRecords / limit),\r\n                totalRecordsCount: totalRecords,\r\n                overallSalesCount: totalSalesCount,\r\n                overallOrderAmount: orderAmount,\r\n                totalCouponDiscount: totalCouponDiscount\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error('Error while rendering the sales report:', error);\r\n\r\n        if (req.xhr || req.headers.accept.indexOf('json') > -1) {\r\n            return res.status(500).json({ message: 'Server Error', error: error.message });\r\n        } else {\r\n            res.status(500).render('error', { message: 'Server Error', error });\r\n        }\r\n    }\r\n};\r\n\r\n\r\n  \r\n  exports.exportReport = async (req, res) => {\r\n    try {\r\n        const filter = req.query.filter || '';\r\n        const format = req.query.format;\r\n        console.log(`filter = ${filter}`);\r\n        console.log(`format = ${format}`);\r\n\r\n        let queryCondition = {};\r\n\r\n        if (filter) {\r\n            const dateFilter = applyDateFilter(filter);\r\n            queryCondition = { ...queryCondition, ...dateFilter };\r\n        }\r\n\r\n        const salesData = await Order.find(queryCondition).sort({ createdAt: -1 });\r\n        console.log(`salesData = ${salesData}`);\r\n\r\n        if (format === 'excel') {\r\n            console.log('Generating Excel report');\r\n            const worksheetData = salesData.map(data => ({\r\n                OrderID: data.orderId,\r\n                OrderDate: new Date(data.createdAt).toLocaleDateString('en-GB'),\r\n                OrderAmount: `₹${data.payableAmount.toFixed(2)}`,\r\n                CouponDeduction: `₹${data.couponDiscount.toFixed(2)}`,\r\n                PaymentStatus: data.status,\r\n                PaymentMethod: data.paymentMethod,\r\n            }));\r\n\r\n            // Create worksheet and workbook\r\n            const worksheet = xlsx.utils.json_to_sheet(worksheetData);\r\n            const workbook = xlsx.utils.book_new();\r\n            xlsx.utils.book_append_sheet(workbook, worksheet, 'Sales Report');\r\n\r\n            const excelBuffer = xlsx.write(workbook, { type: 'buffer', bookType: 'xlsx' });\r\n            res.setHeader('Content-Disposition', 'attachment; filename=\"sales_report.xlsx\"');\r\n            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n            return res.send(excelBuffer);\r\n        } \r\n        else if (format === 'pdf') {\r\n            console.log('Generating PDF report');\r\n            const doc = new PDFDocument();\r\n            res.setHeader('Content-Disposition', 'attachment; filename=\"sales_report.pdf\"');\r\n            res.setHeader('Content-Type', 'application/pdf');\r\n            doc.pipe(res); //Streams the PDF content to the client.\r\n\r\n            // Document title\r\n            doc.fontSize(20).font('Helvetica-Bold').text('EchoEmporium Sales Report', { align: 'center' });\r\n            doc.moveDown(2);\r\n\r\n            // Table configuration\r\n            const tableTop = 150;\r\n            const startX = 30;\r\n            const rowHeight = 30;\r\n            const cellPadding = 5;\r\n            const tableWidth = 650;\r\n\r\n            // Define columns and their widths\r\n            const columns = [\r\n                { label: 'Order ID', width: 60 },\r\n                { label: 'User ID', width: 90 },\r\n                { label: 'Order Date', width: 80 },\r\n                { label: 'Order Amount', width: 100 },\r\n                { label: 'Coupon Deduction', width: 70 },\r\n                { label: 'Payment Status', width: 70 },\r\n                { label: 'Payment Method', width: 100 }\r\n            ];\r\n\r\n            function drawTableBorders(x, y, width, height) {\r\n                doc.rect(x, y, width, height).stroke();\r\n            }\r\n\r\n            let x = startX;\r\n            let y = tableTop;\r\n\r\n            doc.fontSize(12).font('Helvetica-Bold');\r\n            columns.forEach(column => {\r\n                doc.text(column.label, x + cellPadding, y + cellPadding, { width: column.width - 2 * cellPadding, align: 'left' });\r\n                drawTableBorders(x, y, column.width, rowHeight);\r\n                x += column.width;\r\n            });\r\n\r\n            y += rowHeight;\r\n            doc.font('Helvetica').fontSize(10);\r\n\r\n            salesData.forEach((data) => {\r\n                x = startX;\r\n                const truncatedUserId = `${data.userId.toString().substring(0, 6)}....${data.userId.toString().substring(data.userId.toString().length - 6)}`;\r\n                const rowData = [\r\n                    data.orderId,\r\n                    truncatedUserId,\r\n                    new Date(data.createdAt).toLocaleDateString('en-GB'),\r\n                    `₹${data.payableAmount.toFixed(2)}`,\r\n                    `₹${data.couponDiscount.toFixed(2)}`,\r\n                    data.status,\r\n                    data.paymentMethod\r\n                ];\r\n\r\n                rowData.forEach((text, i) => {\r\n                    doc.text(text, x + cellPadding, y + cellPadding, { width: columns[i].width - 2 * cellPadding, align: 'left' });\r\n                    drawTableBorders(x, y, columns[i].width, rowHeight);\r\n                    x += columns[i].width;\r\n                });\r\n\r\n                y += rowHeight;\r\n            });\r\n\r\n            doc.end();\r\n        } else {\r\n            res.status(400).json({ message: 'Invalid format specified' });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Error generating report:', error);\r\n        if (!res.headersSent) {\r\n            res.status(500).json({ message: 'Server Error', error: error.message });\r\n        }\r\n    }\r\n};\r\n  \r\n\r\n\r\n  "
        }
    ]
}