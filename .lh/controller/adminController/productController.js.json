{
    "sourceFile": "controller/adminController/productController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1736721198932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736723334446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n+        \r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723346531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-        \r\n+        if(s)\r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723360972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-        if(s)\r\n+        if(stock>5)\r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723375687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,11 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-        if(stock>5)\r\n+        if(stock>50){\r\n+            p\r\n+        }\r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723410971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n         if(stock>50){\r\n-            p\r\n+            return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n"
                },
                {
                    "date": 1736723420406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,11 +66,9 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-        if(stock>50){\r\n-            return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n-        }\r\n+      \r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723576446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n             productSchema.countDocuments()\r\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n+        \r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n"
                },
                {
                    "date": 1736723581742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,11 @@\n             productSchema.countDocuments()\r\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n-        \r\n \r\n+        if()\r\n+\r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n         res.status(500).send('Internal Server Error');\r\n"
                },
                {
                    "date": 1736723586932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n-        if()\r\n+        if(product.stock>)\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n"
                },
                {
                    "date": 1736723592711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n-        if(product.stock>)\r\n+        if(product.stock>5)\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n"
                },
                {
                    "date": 1736723627846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,11 @@\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n-        if(product.stock>5)\r\n+        if(product.stock>50){\r\n+            product.\r\n+        }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n"
                },
                {
                    "date": 1736723633519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n         if(product.stock>50){\r\n-            product.\r\n+            product.name=`$`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736723638803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n         if(product.stock>50){\r\n-            product.name=`$`\r\n+            product.name=`${pro}`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736723644517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n         if(product.stock>50){\r\n-            product.name=`${pro}`\r\n+            product.name=`${product.name}-`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736723649879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n         if(product.stock>50){\r\n-            product.name=`${product.name}-`\r\n+            product.name=`${product.name}-Limited stock`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736723706834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n-        if(product.stock>50){\r\n+        if(products.stock>50){\r\n             product.name=`${product.name}-Limited stock`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n"
                },
                {
                    "date": 1736723715258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n         if(products.stock>50){\r\n-            product.name=`${product.name}-Limited stock`\r\n+            products.name=`${product.name}-Limited stock`\r\n         }\r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736723746339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,9 @@\n         ]);\r\n \r\n         const totalPages = Math.ceil(totalProducts / limit);\r\n \r\n-        if(products.stock>50){\r\n-            products.name=`${product.name}-Limited stock`\r\n-        }\r\n+ \r\n \r\n         res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n     } catch (error) {\r\n         console.error('Error fetching products:', error);\r\n"
                },
                {
                    "date": 1736723754796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n exports.getAddProduct = async (req, res) => {\r\n     try {\r\n         const categories = await category.find({ isDeleted: false });\r\n         res.render('admin/addProduct', { categories });\r\n+        \r\n     } catch (err) {\r\n         console.error('Error fetching categories:', err);\r\n         res.status(500).send('Internal Server Error');\r\n     }\r\n"
                },
                {
                    "date": 1736723768726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n exports.getAddProduct = async (req, res) => {\r\n     try {\r\n         const categories = await category.find({ isDeleted: false });\r\n         res.render('admin/addProduct', { categories });\r\n-        \r\n     } catch (err) {\r\n         console.error('Error fetching categories:', err);\r\n         res.status(500).send('Internal Server Error');\r\n     }\r\n@@ -69,9 +68,11 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-      \r\n+        if(products.stock>50){\r\n+            products.name=`${product.name}-Limited stock`\r\n+        }\r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736723811628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,9 @@\n             console.log('Invalid Price or Stock. Must be non-negative.');\r\n             return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n         }\r\n \r\n-        if(products.stock>50){\r\n-            products.name=`${product.name}-Limited stock`\r\n-        }\r\n+       \r\n         // Log uploaded files\r\n         console.log('Uploaded Files:', req.files);\r\n \r\n         const images = req.files.map(file => file.filename);\r\n"
                },
                {
                    "date": 1736740358811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,9 @@\n     const productId = req.params.id;\r\n     const removedImages = JSON.parse(req.body.removedImages || '[]');\r\n     const newImages = req.files;\r\n \r\n+    \r\n     try {\r\n         let product = await productSchema.findById(productId);\r\n         if (!product) {\r\n             return res.status(404).json({ message: 'Product Not Found!' });\r\n"
                },
                {
                    "date": 1736740376417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,8 @@\n     const productId = req.params.id;\r\n     const removedImages = JSON.parse(req.body.removedImages || '[]');\r\n     const newImages = req.files;\r\n \r\n-    \r\n     try {\r\n         let product = await productSchema.findById(productId);\r\n         if (!product) {\r\n             return res.status(404).json({ message: 'Product Not Found!' });\r\n@@ -171,8 +170,9 @@\n             });\r\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n+        \r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736740382359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,10 +170,11 @@\n             });\r\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n-        \r\n \r\n+        if(p)\r\n+\r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n         console.error('Error updating product:', error);\r\n"
                },
                {
                    "date": 1736740387979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n-        if(p)\r\n+        if(product.s)\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736740395159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n-        if(product.s)\r\n+        if(product.stock < 5) \r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736740400324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,11 @@\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n-        if(product.stock < 5) \r\n+        if(product.stock < 5) {\r\n+            pro\r\n+        }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1736740405589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            pro\r\n+            product.name \r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740411908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name \r\n+            product.name += ''\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740417010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name += ''\r\n+            product.name += 'Limite'\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740508408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name += 'Limite'\r\n+            product.name += 'Limited Stock\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740572517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name += 'Limited Stock\r\n+            product.name =\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740585319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name =\r\n+            product.name += ''\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740590459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n         if(product.stock < 5) {\r\n-            product.name += ''\r\n+            product.name += 'Limit'\r\n         }\r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n"
                },
                {
                    "date": 1736740747303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,11 +171,9 @@\n         }\r\n \r\n         product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n \r\n-        if(product.stock < 5) {\r\n-            product.name += 'Limit'\r\n-        }\r\n+        \r\n \r\n         await product.save();\r\n         res.status(200).json({ message: 'Product Updated Successfully' });\r\n     } catch (error) {\r\n"
                }
            ],
            "date": 1736721198932,
            "name": "Commit-0",
            "content": "\r\n// ====================\r\n// Product Controller\r\n// ====================\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst category = require('../../model/categorySchema');\r\nconst productSchema = require('../../model/productSchema');\r\n\r\n// Get all products with pagination\r\nexports.getAllProducts = async (req, res) => {\r\n    try {\r\n        const page = parseInt(req.query.page) || 1;\r\n        const limit = 10;\r\n        const offset = (page - 1) * limit;\r\n\r\n        const [products, totalProducts] = await Promise.all([\r\n            productSchema.find()\r\n                .populate('category')\r\n                .sort({ createdAt: -1 })\r\n                .skip(offset)\r\n                .limit(limit),\r\n            productSchema.countDocuments()\r\n        ]);\r\n\r\n        const totalPages = Math.ceil(totalProducts / limit);\r\n\r\n        res.render('admin/products', { products, currentPage: page, totalPages, limit });\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n};\r\n\r\n// Render form to add a new product\r\nexports.getAddProduct = async (req, res) => {\r\n    try {\r\n        const categories = await category.find({ isDeleted: false });\r\n        res.render('admin/addProduct', { categories });\r\n    } catch (err) {\r\n        console.error('Error fetching categories:', err);\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n};\r\n\r\n// Add a new product\r\nexports.postAddProduct = async (req, res) => {\r\n    try {\r\n        // Log the incoming request body\r\n        console.log('Request Body:', req.body);\r\n\r\n        const {\r\n            productName, description, price, discount = 0, stock, category\r\n        } = req.body;\r\n\r\n        // Log parsed input values\r\n        console.log('Parsed Input Values:');\r\n        console.log('Product Name:', productName);\r\n        console.log('Description:', description);\r\n        console.log('Price:', price);\r\n        console.log('Discount:', discount);\r\n        console.log('Stock:', stock);\r\n        console.log('Category:', category);\r\n\r\n        if (price < 0 || stock < 0) {\r\n            console.log('Invalid Price or Stock. Must be non-negative.');\r\n            return res.status(400).json({ message: 'Price and Stock must be non-negative' });\r\n        }\r\n\r\n        // Log uploaded files\r\n        console.log('Uploaded Files:', req.files);\r\n\r\n        const images = req.files.map(file => file.filename);\r\n        console.log('Mapped Images Array:', images);\r\n\r\n        const finalPrice = price - (price * (discount / 100));\r\n        console.log('Calculated Final Price:', finalPrice);\r\n\r\n        const newProduct = new productSchema({\r\n            name: productName,\r\n            description,\r\n            price,\r\n            discount,\r\n            stock,\r\n            category,\r\n            imgArray: images,\r\n            finalPrice\r\n        });\r\n\r\n        // Log the new product object\r\n        console.log('New Product Object:', newProduct);\r\n\r\n        await newProduct.save();\r\n\r\n        console.log('Product successfully added to the database.');\r\n        res.status(200).json({ success: true, message: 'Product Successfully Added!' });\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Failed to add product:', error);\r\n        res.status(500).json({ message: 'Failed to add Product' });\r\n    }\r\n};\r\n\r\nexports.BlockUnblock = async (req, res) => {\r\n    const productId = req.params.id;\r\n    const { active } = req.body;\r\n\r\n    try {\r\n        const product = await productSchema.findById(productId);\r\n        if (!product) {\r\n            return res.status(404).json({ message: 'Product not found' });\r\n        }\r\n\r\n        product.isActive = active; // Set active status\r\n        await product.save();\r\n\r\n        res.status(200).json({ message: active ? 'Product unblocked' : 'Product blocked', product });\r\n    } catch (error) {\r\n        console.error('Error blocking/unblocking product:', error);\r\n        res.status(500).json({ message: 'Server error' });\r\n    }\r\n};\r\n\r\n\r\n// Render form to edit a product\r\nexports.getUpdateProduct = async (req, res) => {\r\n    const productId = req.params.id;\r\n\r\n    try {\r\n        const product = await productSchema.findById(productId);\r\n        const categories = await category.find({ isDeleted: false });\r\n\r\n        res.render('admin/editProduct', { product, categories });\r\n    } catch (error) {\r\n        console.error('Error fetching product for editing:', error);\r\n        res.status(500).send('Server Error');\r\n    }\r\n};\r\n\r\n// Edit a product\r\nexports.postEditProduct = async (req, res) => {\r\n    const productId = req.params.id;\r\n    const removedImages = JSON.parse(req.body.removedImages || '[]');\r\n    const newImages = req.files;\r\n\r\n    try {\r\n        let product = await productSchema.findById(productId);\r\n        if (!product) {\r\n            return res.status(404).json({ message: 'Product Not Found!' });\r\n        }\r\n\r\n        Object.assign(product, req.body);\r\n\r\n        if (removedImages.length > 0) {\r\n            product.imgArray = product.imgArray.filter(img => !removedImages.includes(img));\r\n            removedImages.forEach(image => {\r\n                const filePath = path.join('uploads', image);\r\n                if (fs.existsSync(filePath)) {\r\n                    fs.unlinkSync(filePath);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (newImages && newImages.length > 0) {\r\n            newImages.forEach(file => {\r\n                product.imgArray.push(file.filename);\r\n            });\r\n        }\r\n\r\n        product.finalPrice = product.price - (product.price * (product.discount / 100));\r\n\r\n        await product.save();\r\n        res.status(200).json({ message: 'Product Updated Successfully' });\r\n    } catch (error) {\r\n        console.error('Error updating product:', error);\r\n        res.status(500).json({ message: 'An error occurred while updating the product!' });\r\n    }\r\n};\r\n"
        }
    ]
}