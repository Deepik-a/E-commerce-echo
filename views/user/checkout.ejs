<%- include('navbar') %>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@3.3.2/dist/tailwind.min.css" rel="stylesheet">


<div class="container mx-auto my-8">
    <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
        <!-- Shipping and Payment Information -->
        <div class="bg-[url('/uploads/Green%20Watercolor%20Leaf%20Linktree%20Background.png')] bg-cover bg-center shadow-lg rounded-lg p-6 border border-[#14213d]">

            <a href="/userprofile?from=checkout">
                <button class="bg-blue-500 text-white font-bold py-2 px-4 rounded">
                    Change Address
                </button>
            </a>
            
            <form action="/place-order" method="POST" id="orderForm" class="max-w-3xl mx-auto px-4 py-8">
                <ol class="space-y-8">
                    <!-- Shipping Info -->
                    <li class="relative">
                        <div class="flex items-center mb-6">
                
                            <h5 class="text-xl font-semibold text-[#14213d] ml-4">Shipping Information</h5>
                        </div>
                        
                      <div id="addressList" class="pl-14">
    <% if (Array.isArray(addresses) && addresses.length > 0) { %>
        <div class="grid gap-4">
            <% addresses.forEach((address, index) => { %>
                <label class="block">
                    <div class="group relative flex items-start p-4 border-2 border-gray-200 rounded-lg hover:border-[#14213d] transition-colors duration-200 cursor-pointer">
                        <input 
                            type="radio" 
                            name="selectedAddress" 
                            class="form-radio mt-1 h-5 w-5 text-[#14213d] border-gray-300 focus:ring-[#14213d]" 
                            value="<%= address._id %>"
                            onclick="selectAddress(this, '<%= index %>')"
                        >
                        <div class="ml-4">
                            <p class="font-medium text-gray-900"><%= address.building %></p>
                            <p class="mt-1 text-sm text-gray-600">
                                <%= address.street %>, <%= address.city %>, 
                                <%= address.state %>, <%= address.country %>, 
                                <%= address.pincode %>
                            </p>
                        </div>
                    </div>
                </label>
            <% }) %>
        </div>
    <% } else { %>
        <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <p class="text-red-600 text-sm">No addresses available. Please add a new address.</p>
        </div>
    <% } %>
</div>

                        
                    </li>
            
                    <!-- Payment Method -->
                    <div class="payment-methods mt-8 max-w-3xl mx-auto">
                        <h2 class="text-2xl font-bold text-gray-900 mb-6 border-b pb-4">Payment method</h2>
                        <div class="payment-options space-y-4">
                            <div class="payment-method relative overflow-hidden p-6 rounded-xl border-2 border-transparent hover:border-indigo-100 bg-white shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer" onclick="selectPaymentMethod(this, 0)">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0 w-12 h-12 rounded-full bg-indigo-50 flex items-center justify-center">
                                        <i class="bi bi-cash text-indigo-600" style="font-size: 1.5rem;"></i>
                                    </div>
                                    <div class="flex-grow">
                                        <h3 class="text-lg font-semibold text-gray-900">Cash on Delivery</h3>
                                        <p class="text-sm text-gray-500">Pay when you receive your order</p>
                                    </div>
                                    <div class="payment-check hidden">
                                        <div class="w-6 h-6 rounded-full bg-indigo-600 flex items-center justify-center">
                                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                            <div class="payment-method relative overflow-hidden p-6 rounded-xl border-2 border-transparent hover:border-indigo-100 bg-white shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer" onclick="selectPaymentMethod(this, 1)">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0 w-12 h-12 rounded-full bg-indigo-50 flex items-center justify-center">
                                        <i class="bi bi-wallet-fill text-indigo-600" style="font-size: 1.5rem;"></i>
                                    </div>
                                    <div class="flex-grow">
                                        <div class="flex items-center space-x-2">
                                            <h3 class="text-lg font-semibold text-gray-900">Wallet</h3>
                                            <span class="inline-flex items-baseline gap-1">
                                                <span class="text-sm font-medium text-gray-400">â‚¹</span>
                                                <span class="text-lg font-bold text-indigo-600">
                                                    <%= (wallet.balance).toFixed(0) %>
                                                </span>
                                            </span>
                                        </div>
                                        <p class="text-sm text-gray-500">Pay using your wallet balance</p>
                                    </div>
                                    <div class="payment-check hidden">
                                        <div class="w-6 h-6 rounded-full bg-indigo-600 flex items-center justify-center">
                                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                            <div class="payment-method relative overflow-hidden p-6 rounded-xl border-2 border-transparent hover:border-indigo-100 bg-white shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer" onclick="selectPaymentMethod(this, 2)">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0 w-12 h-12 rounded-full bg-indigo-50 flex items-center justify-center">
                                        <i class="bi bi-paypal text-indigo-600" style="font-size: 1.5rem;"></i>
                                    </div>
                                    <div class="flex-grow">
                                        <h3 class="text-lg font-semibold text-gray-900">Razorpay</h3>
                                        <p class="text-sm text-gray-500">Pay securely with Razorpay</p>
                                    </div>
                                    <div class="payment-check hidden">
                                        <div class="w-6 h-6 rounded-full bg-indigo-600 flex items-center justify-center">
                                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- coupon management -->
                    <div class="mt-6 w-full space-y-6 sm:mt-8 lg:mt-0 lg:max-w-xs xl:max-w-md">
                        <div id="couponDiv" class="my-9">
                          <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Available coupons</h2>
                          <form id="applyCouponform" action="">
                            <select name="couponCode"
                            class="w-full mt-2 p-2.5 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-base font-medium text-gray-900 dark:text-white focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 focus:outline-none transition-colors duration-300 ease-in-out"
                            id="coupons">
                          
                            <option selected disabled value="">Select Coupon</option>
                            <% eligibleCoupons.forEach(coupon => { %>
                                <option value="<%= coupon._id %>">
                                    <%= coupon.code %> 
                                    <%= coupon.discountType === 'Percentage' 
                                        ? coupon.discountValue + '%' + ' discount' 
                                        : 'â‚¹ ' + coupon.discountValue + ' discount' %>
                                </option>
                            <% }) %>
                        </select>
                        
                            <span id="couponError" class="text-red-500 text-sm"></span>
              
                            <% if(!cartDetails.isCouponApplied){ %>
              
                              <button id="applyCouponBtn" type="button"
                                class="bg-green-700 mt-5  dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800 w-full items-center justify-center rounded-lg px-5 py-2.5 text-sm font-medium text-white focus:outline-none focus:ring-4 transition-colors duration-300 ease-in-out">
                                Apply Coupon
                              </button>
                              <% }else{ %>
                                <button id="removeCouponBtn" type="button"
                                  class="bg-red-700 mt-5  dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800 w-full items-center justify-center rounded-lg px-5 py-2.5 text-sm font-medium text-white focus:outline-none focus:ring-4 transition-colors duration-300 ease-in-out">
                                  Remove Coupon
                                </button>
              
                                <% } %>
                          </form>
                        </div>
                </div>
                </ol>
            
                <!-- Action Buttons -->
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4 mt-12 pl-14">
                    <a href="/cart" 
                       class="w-full sm:w-auto px-6 py-3 bg-gray-100 text-[#14213d] font-medium rounded-lg hover:bg-gray-200 transition-colors duration-200 text-center">
                        <i class="mdi mdi-arrow-left mr-2"></i>
                        Continue Shopping
                    </a>
                   
                    
                    <form action="" method="post" id="place-order-form" class="w-full sm:w-auto">
                        <button type="submit" 
                        id="place-order-btn"
                        data-amount="<%= cartDetails.payableAmount > 0 ? cartDetails.payableAmount.toFixed(0)  : cartDetails.totalPrice.toFixed(0)  %>"
                        data-username="<%= user.name %>" 
                        data-mail="<%= user.email %>"
                        data-phone="<%= user.phone %>"
                        class="w-full px-6 py-3 text-white font-medium rounded-lg"
                        style="background-color: rgb(26, 83, 25);">
                    Place Order
                </button>
                
                    </form>
                </div>
            </form>
        </div>

        <!-- Order Summary -->

        <div class="bg-[url('/uploads/Green Watercolor Leaf Linktree Background.png')] shadow-lg rounded-lg p-6 border border-[#14213d]">


            <!-- Order Summary Header -->
            <div class="bg-gray-50 p-6 rounded-lg mb-6">
                <h5 class="text-xl font-bold text-gray-800">Order Summary <span class="float-right text-gray-600">#MN0124</span></h5>
            </div>
        
            <!-- Products Table -->
            <div class="overflow-x-auto mb-8">
                <table class="w-full table-auto">
                    <thead>
                        <tr class="border-b-2 border-gray-100">
                            <th class="text-left text-gray-600 py-4 font-semibold">Product</th>
                            <th class="text-left text-gray-600 py-4 font-semibold">Product Desc</th>
                            <th class="text-left text-gray-600 py-4 font-semibold">Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% cartDetails.items.forEach(item => { %>
                        <tr class="border-b border-gray-50">
                            <td class="py-4">
                                <img src="<%= '/uploads/' +item.productImage%>" alt="<%= item.productId.name %>" 
                                     class="rounded-lg shadow-sm" style="max-width: 100px; height: 100px; object-fit: cover;">
                            </td>
                            <td class="py-4">
                                <h5 class="text-lg font-semibold text-gray-800"><%= item.productId.name %></h5>
                                <p class="text-gray-500"><%= item.productPrice.toFixed(0) %> x <%= item.productCount %></p>
                            </td>
                            <td class="py-4 text-gray-800">Rs <%= (item.productPrice * item.productCount).toFixed(0) %></td>
                        </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        
            <!-- Price Breakdown -->
            <div class="w-full bg-gray-50 rounded-xl p-6">
                <h5 class="font-bold text-xl mb-6" style="color: rgb(26, 83, 25);">Price Breakdown</h5>
                
                <div class="space-y-4">
                    <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                        <span class="text-gray-600">Total Price:</span>
                        <span style="color: rgb(26, 83, 25);">Rs <%= cartDetails.items.reduce((total, item) => total + (item.productPrice * item.productCount), 0).toFixed(0) %></span>
                    </div>
                    
                    <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                        <span class="text-gray-600">Coupon Discount:</span>
                        <span id="coupon-discount" style="color: rgb(26, 83, 25);">Rs <%=cartDetails.couponDiscount > 0 ? cartDetails.couponDiscount : 0 %></span>
                    </div>
                    
                    <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                        <span class="text-gray-600">Delivery Charge:</span>
                        <span style="color: rgb(26, 83, 25);">Free</span>
                    </div>
                    
                    <div class="flex justify-between items-center pt-4">
                        <span class="text-xl font-bold text-gray-800">Total:</span>
                        <span id="payable-amount" class="text-xl font-bold" style="color: rgb(26, 83, 25);">Rs <%=cartDetails.payableAmount > 0 ? cartDetails.payableAmount.toFixed(0) :cartDetails.totalPrice.toFixed(0) %></span>
                    </div>
                </div>
            </div>
        </div>
    
        </div>
        
    </div>          
</div>
<!-- Button to Open the Modal -->



<script src="https://checkout.razorpay.com/v1/checkout.js"></script>    
<script>
        let selectedAddressIndex = null;
        let selectedPaymentMethod = null;
        const orderPlacementBtn = document.getElementById('place-order-btn');
        let totalAmount = orderPlacementBtn.getAttribute('data-amount');
        const username = orderPlacementBtn.getAttribute('data-username');
        const email = orderPlacementBtn.getAttribute('data-email');
        const phone = orderPlacementBtn.getAttribute('data-phone');
// Function to toggle modal visibility
// Function to toggle modal visibility

function toggleModal(show) {
    const modal = document.getElementById("addressModal");
    modal.classList.toggle("hidden", !show);
}
function selectPaymentMethod(element, method) {
    console.log('hai')
    document.querySelectorAll('.payment-method').forEach(el => {
        el.classList.remove('border-indigo-600', 'bg-indigo-50/50');
        el.querySelector('.payment-check').classList.add('hidden');
    });
    
    // Add active state to selected payment method
    element.classList.add('border-indigo-600', 'bg-indigo-50/50');
    element.querySelector('.payment-check').classList.remove('hidden');
    document.querySelectorAll('.payment-method').forEach(el => {
        el.classList.remove('border-blue-500', 'bg-blue-50');
        el.querySelector('i').classList.remove('text-blue-500');
    });
    
    // Add active state to selected payment method
    element.classList.add('border-blue-500', 'bg-blue-50');
    element.querySelector('i').classList.add('text-blue-500');
            const methods = document.querySelectorAll('.payment-method');
            methods.forEach(methodElement => methodElement.classList.remove('selected'));
            element.classList.add('selected');
            selectedPaymentMethod = method;
        }

function selectAddress(element,index){
 const cards = document.querySelectorAll('.address-card');
 cards.forEach(card => card.classList.remove('selected'));
 element.classList.add('selected');
 selectedAddressIndex = index;

 console.log(`selectedAdd = ${selectedAddressIndex}`);
 
 console.log(`selectedAdd = ${selectedPaymentMethod }`);

 
}        

orderPlacementBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    console.log("Prevented submitting");

    // Check for selected address
    if (selectedAddressIndex === null) {
        Swal.fire({
            icon: "warning",
            title: "Please select a shipping address.",
            text: "Select one"
        });
        return;
    }

    // Check for selected payment method
    if (selectedPaymentMethod === null) {
        Swal.fire({
            icon: "warning",
            title: "Please select a payment method.",
            text: "Select one"
        });
        return;
    }

    // Check if Razorpay is selected
    if (selectedPaymentMethod === 2) {
        openRazorpayPayment();
    } else {
        // Validate and place the order for other payment methods
        try {
            const response = await fetch(`/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    payment_status: "Pending"
                })
            });

            if (response.redirected) {
                window.location.href = response.url;
                return;
            }

            const data = await response.json();
            if (data.success) {
                window.location.href = "/conform-order";
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Order Placement Failed",
                    text: data.message
                });
            }
        } catch (err) {
            console.error("Error during order placement:", err);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "An error occurred while placing the order."
            });
        }
    }
});

function openRazorpayPayment() {
    const URL = `/payment-render/${totalAmount}`;
    fetch(URL, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        }
    })
        .then((res) => {
            if (!res.ok) {
                throw new Error("Cannot render the payment page");
            }
            return res.json();
        })
        .then((data) => {
            if (data.orderID) {
                const options = {
                    key: "rzp_test_KDYrLJHnu3O9Ip",
                    amount: totalAmount,
                    currency: "INR",
                    name: "Echo Emporium",
                    order_id: data.orderID,
                    handler: function (response) {
                        fetch(`/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                payment_status: "Paid"
                            })
                        })
                            .then((res) => {
                                if (res.redirected) {
                                    window.location.href = res.url;
                                    return;
                                }

                                return res.json();
                            })
                            .then((data) => {
                                if (data.success) {
                                    window.location.href = "/conform-order";
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Order Placement Failed",
                                        text: data.message
                                    });
                                }
                            })
                            .catch((err) => {
                                console.error("Error on Razorpay payment callback:", err);
                                Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text: "An error occurred while processing the order."
                                });
                            });
                    },
                    prefill: {
                        name: username,
                        email: email,
                        contact: phone
                    },
                    notes: {
                        address: "Razorpay Corporate Office"
                    },
                    theme: {
                        color: "#6351CE"
                    }
                };

                const rzp1 = new Razorpay(options);
                rzp1.on("payment.failed", function (response) {
                    console.error("Payment Failed:", response);

                    const failedOrderUrl = `/failed-order?address=${selectedAddressIndex}&paymentMethod=${selectedPaymentMethod}`;
                    window.location.href = failedOrderUrl;
                });
                rzp1.open();
            } else {
                throw new Error("Order ID not received");
            }
        })
        .catch((error) => {
            Swal.fire({
                icon: "error",
                title: "Error on loading payment method",
                text: error.message
            });
            console.error("Error during payment initiation:", error);
        });
}


        window.onload = function () {
        // Add event listeners after the DOM is fully loaded
        const applyCouponBtn = document.getElementById('applyCouponBtn');
        const removeCouponBtn = document.getElementById('removeCouponBtn');

        // Check if the elements exist before adding event listeners
        if (applyCouponBtn) {
          applyCouponBtn.addEventListener('click', applyCoupon);
        }

        if (removeCouponBtn) {
          removeCouponBtn.addEventListener('click', removeCoupon);
        }
      };

      function applyCoupon() {
        console.log('hai')
        const selectedCouponId = document.getElementById('coupons').value;
        const couponError = document.getElementById('couponError')
         



        let isValid = true

        if (!selectedCouponId) {
          couponError.innerHTML = "Please select a coupon"
          return
        }
 

        const data = {
          couponCode: selectedCouponId
        }

        console.log(selectedCouponId);
       

        fetch('/applyCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)

        })
          .then(response => response.json())
          .then(result => {
            if (result.status === 'success') {
              Swal.fire({
                icon: 'success',
                title: 'Coupon Applied',
                text: result.message || 'Coupon applied successfully'
              })
                .then(() => {
                  window.location.reload()

                })
            } else {
              Swal.fire({
                icon: 'error',
                title: 'coupon failed',
                text: result.message || 'coupon applied failed'
              })
            }
          })
          .catch(error => {
            console.log('errror while applying coupon', error);
            Swal.fire({
              icon: 'error',
              title: error,
              text: 'An erro occured in coupon applying'

            })
          })



      }

      function removeCoupon() {
      

        const selectedCouponId = document.getElementById('coupons').value;

        console.log(selectedCouponId);


        const data = {
          couponCode: selectedCouponId
        }

        fetch('/removeCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
          .then(response => response.json())
          .then(result => {
            if (result.status === 'success') {
              Swal.fire(({
                icon: 'success',
                title: 'Coupon removed',
                text: result.message || 'Coupon removed successfully'
              })).then(() => {
                window.location.reload()
              })
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Coupon remove failed',
                text: result.message

              })
            }
          })
          .catch(error => {
            console.log('error while removing coupon : ', error);
            Swal.fire({
              icon: 'error',
              title: "server error",
              text: error
            })



          })

      }
        function placeOrder(addressIndex, paymentMethod) {
            const URL = `/place-order/${addressIndex}/${paymentMethod}`;
            fetch(URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    addressIndex: addressIndex,
                    paymentMode: paymentMethod,
                    payment_status:'Pending'
                   
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = "/conform-order";
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Placement Failed",
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Placement Failed',
                        text: error.message,
                    });
                });
        }






function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: message
            });
        }

// Function to add the new address to the address list in the DOM
function addAddressToList(address) {
    const addressList = document.getElementById("addressList"); // The parent div container

    // Create a new address element
    const addressItem = document.createElement("label");
    addressItem.className = "block my-3";
    addressItem.innerHTML = `
        <div class="group relative flex items-start p-4 border-2 border-gray-200 rounded-lg hover:border-[#14213d] transition-colors duration-200 cursor-pointer">
            <input 
                type="radio" 
                name="selectedAddress" 
                class="form-radio mt-1 h-5 w-5 text-[#14213d] border-gray-300 focus:ring-[#14213d]" 
                value="${address._id}"
                onclick="selectAddress(this)"
            >
            <div class="ml-4">
                <p class="font-medium text-gray-900">${address.building}</p>
                <p class="mt-1 text-sm text-gray-600">
                    ${address.street}, ${address.city}, 
                    ${address.state}, ${address.country}, 
                    ${address.pincode}
                </p>
            </div>
        </div>
    `;

    // Append the new address to the list
    addressList.appendChild(addressItem);
}







</script>
<style>
     /*------------------------------- payment option ----------------------------*/

    
</style>
<%- include('footer') %>