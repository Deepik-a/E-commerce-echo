<%- include('navbar') %>

<style>
    body{
        background-image: url('../../uploads/happy-korean-woman-wakes-up-her-hotel-room-lying-bed-cozy-warm-blankets-white-sheets.jpg');
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
       
        
    }
    .otp-container {
        background: url('../../uploads/Green\ Watercolor\ Leaf\ Linktree\ Background.png');
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
        width: 100%;
        height: 100%;
        padding: 3rem;
        color:#1A5319;
        border-radius: 10px;
    }

    .user-otp-text {
        padding: 1rem;
        font-size: 4rem;
    }

    .otp-input {
        background: #fefeeb;
        color: #232323;
        text-align: center;
        padding: 10px;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        width: 10%;
    }

    .user-forget-input {
        margin: 2rem;
        display: flex;
        justify-content: center;
    }
    /* Body styles */
body {
    margin: 0;
    font-family: Arial, sans-serif;
}

/* Content Wrapper */
.content-wrapper {
    display: flex;
    justify-content: flex-start; /* Default to the left */
    align-items: center; /* Vertically center */
    min-height: calc(100vh - var(--navbar-height) - var(--footer-height));
    padding: 1rem;
    background-image: url('../../uploads/happy-korean-woman-wakes-up-her-hotel-room-lying-bed-cozy-warm-blankets-white-sheets.jpg');
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
    box-sizing: border-box;
}

/* OTP Container */
.otp-container {
    background: url('../../uploads/Green\ Watercolor\ Leaf\ Linktree\ Background.png');
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
    max-width: 800px; /* Restrict the width for responsiveness */
    width: 100%;
    padding: 2rem;
    color: #1A5319;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    margin-left: auto; /* Center-aligned by default */
    margin-right:2%; /* Slightly move towards the right */
}

/* Responsive Design */
@media screen and (max-width: 768px) {
    .otp-container {
        margin: 0 auto; /* Center the container for smaller screens */
        box-shadow: none; /* Reduce visual clutter on smaller screens */
    }

    .content-wrapper {
        justify-content: center; /* Center everything for small screens */
    }
}

/* Variables for navbar and footer height */
:root {
    --navbar-height: 60px; /* Adjust based on your navbar height */
    --footer-height: 60px; /* Adjust based on your footer height */
}

</style>



<!-------------------------------------------- Forget password OTP ------------------------------------------------->
<div class="content-wrapper">
    <div class="otp-container my-5 container w-50 d-flex flex-column align-items-center">
        <div class="text-center">
            <h2 class="user-otp-text"><i class="bi bi-shield-fill-check"></i> Enter OTP Code</h2>
            <small class="">One Time Password (OTP) has been sent via Email to</small>
            <b id="OTP-email"><%= email %></b>
        </div>
        <div>
            <form action="/forgotpasswordotp" method="post" id="forgotpasswordotp" onsubmit="return validateForm(event)">
                <div class="d-flex gap-2 user-forget-input">
                    <input type="text" minlength="1" maxlength="1" name="otp1" class="otp-input" autocomplete="off" required>
                    <input type="text" minlength="1" maxlength="1" name="otp2" class="otp-input" autocomplete="off" required>
                    <input type="text" minlength="1" maxlength="1" name="otp3" class="otp-input" autocomplete="off" required>
                    <input type="text" minlength="1" maxlength="1" name="otp4" class="otp-input" autocomplete="off" required>
                    <input type="text" minlength="1" maxlength="1" name="otp5" class="otp-input" autocomplete="off" required>
                </div>
                <div id="validation-message" class="text-danger mt-2 text-center" style="display: none;"></div>
                <input type="hidden" name="otp" id="otp">
                <input type="hidden" name="otpTime" value="<%= otpTime %>" id="otpTime">
            </form>
        </div>
        <div id="otpTimer" class="mt-3"></div>
        <div>
            <a href="/forgotpassword-resend/<%= email %>" id="resend-btn" class="btn submit-btn mt-3" style="display: none;" onclick="handleResend(event)">Resend</a>
        </div>
        <button id="verify-btn" class="mt-4 btn submit-btn" onclick="validateOTP(event)">Validate</button>
    </div>
    </div>
 
    <script>
        const otpInputs = document.querySelectorAll('.otp-input');
        const hiddenOtpInput = document.getElementById('otp');
        const otpTimer = document.getElementById('otpTimer');
        const verifyBtn = document.getElementById('verify-btn');
        const resendBtn = document.getElementById('resend-btn');
        const validationMessage = document.getElementById('validation-message');
    
        const duration = 2 * 60 * 1000; // 2 minutes
        let timerInterval;
        let isTimerExpired = false;
    
        // Check or initialize `otpTime` in localStorage
        let currentOtpTime = parseInt(localStorage.getItem('otpTime'), 10);
        const now = Date.now();
    
        // Reset `otpTime` if not present or already expired
        if (!currentOtpTime || now - currentOtpTime >= duration) {
            currentOtpTime = now;
            localStorage.setItem('otpTime', currentOtpTime);
        }
    
        // Handle OTP input navigation
        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                validationMessage.style.display = 'none'; // Clear validation message
                e.target.value = e.target.value.replace(/[^0-9]/g, ''); // Allow only numbers
    
                if (input.value.length === input.maxLength) {
                    const nextInput = otpInputs[index + 1];
                    if (nextInput) nextInput.focus();
                }
                updateHiddenOtpInput();
            });
    
            input.addEventListener('keydown', (event) => {
                if (event.key === 'Backspace' && input.value.length === 0) {
                    const prevInput = otpInputs[index - 1];
                    if (prevInput) prevInput.focus();
                }
            });
    
            input.addEventListener('focus', () => {
                input.style.borderColor = '#007bff';
            });
    
            input.addEventListener('blur', () => {
                input.style.borderColor = input.value ? '#28a745' : '#dc3545';
            });
        });
    
        function updateHiddenOtpInput() {
            let otpValue = '';
            otpInputs.forEach(input => (otpValue += input.value));
            hiddenOtpInput.value = otpValue;
        }
    
        function validateOTP(event) {
            event.preventDefault();
            let emptyInputs = 0;
            let firstEmptyInput = null;
    
            otpInputs.forEach(input => {
                if (!input.value) {
                    input.style.borderColor = '#dc3545';
                    emptyInputs++;
                    if (!firstEmptyInput) firstEmptyInput = input;
                } else {
                    input.style.borderColor = '#28a745';
                }
            });
    
            if (emptyInputs > 0) {
                validationMessage.innerHTML = `Please enter all ${emptyInputs} remaining digit${emptyInputs > 1 ? 's' : ''} of the OTP`;
                validationMessage.style.display = 'block';
                firstEmptyInput.focus();
                return false;
            }
    
            if (isTimerExpired) {
                validationMessage.innerHTML = 'OTP has expired. Please request a new one.';
                validationMessage.style.display = 'block';
                return false;
            }
    
            validationMessage.style.display = 'none';
            document.getElementById('forgotpasswordotp').submit();
            return true;
        }
    
        function startTimer() {
            clearInterval(timerInterval);
            isTimerExpired = false;
            verifyBtn.disabled = false;
            resendBtn.style.display = 'none';
    
            timerInterval = setInterval(() => {
                const now = Date.now();
                let remain = duration - (now - currentOtpTime);
    
                if (remain <= 0) {
                    otpTimer.innerHTML = 'OTP has expired';
                    verifyBtn.disabled = true;
                    resendBtn.style.display = 'block';
                    isTimerExpired = true;
                    clearInterval(timerInterval);
                    return;
                }
    
                const min = Math.floor((remain % (1000 * 60 * 60)) / (1000 * 60));
                const sec = Math.floor((remain % (1000 * 60)) / 1000);
                otpTimer.innerHTML = `Time remaining: ${min}:${sec < 10 ? '0' : ''}${sec}`;
            }, 1000);
        }
    
        async function handleResend(event) {
            event.preventDefault();
    
            try {
                const response = await fetch(event.target.href);
                if (response.ok) {
                    // Reset timer and update OTP time
                    currentOtpTime = Date.now();
                    localStorage.setItem('otpTime', currentOtpTime);
    
                    // Clear existing OTP inputs and validation states
                    otpInputs.forEach(input => {
                        input.value = '';
                        input.style.borderColor = '';
                    });
                    validationMessage.style.display = 'none';
                    updateHiddenOtpInput();
    
                    // Restart timer
                    startTimer();
    
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP has been resent!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to resend OTP',
                    text: 'Please try again later'
                });
            }
        }
    
        // Start the timer when page loads
        startTimer();
    
        // Clear localStorage OTP time on successful form submission (optional cleanup)
        document.getElementById('forgotpasswordotp').addEventListener('submit', () => {
            localStorage.removeItem('otpTime');
        });
    </script>
    

 
    
<%- include('footer') %>