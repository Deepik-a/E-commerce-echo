
<%- include('sidebar') %>
  


<!-- Form Start -->
<div class="container mt-5">
  <h2>Add New Product</h2>

  <form id="productForm" action="/admin/addProduct" method="POST" enctype="multipart/form-data">
      <div class="form-group">
          <label for="name">Product Name</label>
          <input type="text" class="form-control" id="name" name="name" required>
          <small class="text-danger" id="nameError"></small>
      </div>
      <div class="form-group">
          <label for="price">Price</label>
          <input type="number" class="form-control" id="price" name="price" required>
          <small class="text-danger" id="priceError"></small>
      </div>
      <div class="form-group">
          <label for="discount">Discount(%)</label>
          <input type="number" class="form-control" id="discount" name="discount" required>
          <small class="text-danger" id="discountError"></small>
      </div>
      <div class="form-group">
          <label for="stock">Stock</label>
          <input type="number" class="form-control" id="stock" name="stock" required>
          <small class="text-danger" id="stockError"></small>
      </div>
      <div class="form-group">
          <label for="category">Category</label>
          <select class="form-control" id="category" name="category" required>
              <% categories.forEach(function(category) { %>
                  <option value="<%= category.name %>"><%= category.name %></option>
              <% }); %>
          </select>
          <small class="text-danger" id="categoryError"></small>
      </div>
      <div class="form-group">
          <label for="description">Product Description</label>
          <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
          <small class="text-danger" id="descriptionError"></small>
      </div>
      <div class="mb-4">
          <label for="images" class="block text-sm font-medium text-gray-700">Product Images</label>
          <input type="file" name="productImages" id="productImages" class="mt-1 p-2 border border-gray-300 rounded w-full">
          <small class="text-danger" id="imageError"></small>
      </div>

      <!-- cropping container -->
      <div id="cropperContainer" style="display: none; max-width: 500px; margin-bottom: 20px;">
          <img id="image" src="" alt="Image for cropping" style="max-width: 100%;">
      </div>

      <!-- Cropped images preview container -->
      <div id="croppedImagesContainer" class="mb-4">
          <h3 class="text-sm font-medium text-gray-700">Cropped Images</h3>
          <div id="croppedImages" class="flex flex-wrap">
              <!-- Cropped images will be appended here dynamically -->
          </div>
      </div>

      <button type="button" id="cropButton" class="btn btn-primary mt-3">Crop & Upload</button>
      <button type="submit" class="btn btn-primary mt-3">Add Product</button>
  </form>
</div>

<!-- Include jQuery, Bootstrap JS, Cropper.js, and SweetAlert -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
  // Real-time validation
  const nameInput = document.getElementById('name');
  const priceInput = document.getElementById('price');
  const discountInput = document.getElementById('discount');
  const stockInput = document.getElementById('stock');
  const categoryInput = document.getElementById('category');
  const descriptionInput = document.getElementById('description');
  const imageInput = document.getElementById('productImages');

  nameInput.addEventListener('input', function() {
      validateField(this, /^[a-zA-Z0-9\s]{3,50}$/, 'Product name should be 3-50 characters long.', 'nameError');
  });

  priceInput.addEventListener('input', function() {
      validateField(this, /^[1-9]\d*$/, 'Price must be a positive number.', 'priceError');
  });

  discountInput.addEventListener('input', function() {
      validateField(this, /^(0|[1-9][0-9]?|100)$/, 'Discount must be between 0-100.', 'discountError');
  });

  stockInput.addEventListener('input', function() {
      validateField(this, /^[1-9]\d*$/, 'Stock must be a positive number.', 'stockError');
  });

  categoryInput.addEventListener('change', function() {
      validateDropdown(this, 'Please select a category.', 'categoryError');
  });

  descriptionInput.addEventListener('input', function() {
      validateField(this, /^.{10,300}$/, 'Description must be 10-300 characters long.', 'descriptionError');
  });

  imageInput.addEventListener('change', function() {
      validateImage(this, 'Please upload a valid image file (JPEG, JPG, PNG, GIF).', 'imageError');
  });

  // Generic field validation function
  function validateField(input, regex, errorMsg, errorElementId) {
      const errorElement = document.getElementById(errorElementId);
      if (!regex.test(input.value.trim())) {
          errorElement.textContent = errorMsg;
          input.classList.add('is-invalid');
      } else {
          errorElement.textContent = '';
          input.classList.remove('is-invalid');
      }
  }

  // Dropdown validation
  function validateDropdown(input, errorMsg, errorElementId) {
      const errorElement = document.getElementById(errorElementId);
      if (!input.value.trim()) {
          errorElement.textContent = errorMsg;
          input.classList.add('is-invalid');
      } else {
          errorElement.textContent = '';
          input.classList.remove('is-invalid');
      }
  }

  // Image validation
  function validateImage(input, errorMsg, errorElementId) {
      const file = input.files[0];
      const errorElement = document.getElementById(errorElementId);
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
      if (file && !allowedTypes.includes(file.type)) {
          errorElement.textContent = errorMsg;
          input.value = ''; // Clear invalid file input
          input.classList.add('is-invalid');
      } else {
          errorElement.textContent = '';
          input.classList.remove('is-invalid');
      }
  }


  let cropper;
        const inputImage = document.getElementById('productImages');
        const image = document.getElementById('image');
        const cropButton = document.getElementById('cropButton');
        const cropperContainer = document.getElementById('cropperContainer');
        const croppedImagesContainer = document.getElementById('croppedImages');
        let croppedImagesData = [];
    
        // Handle image input and initialize cropper
        inputImage.addEventListener('change', (event) => {
            const files = event.target.files;
            if (files && files.length > 0) {
                const file = files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    image.src = e.target.result;
                    cropperContainer.style.display = 'block';
                    cropButton.style.display = 'inline-block';
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(image, {
                        aspectRatio: NaN,
                        viewMode: 1,
                        dragMode: 'move',
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        minCropBoxWidth: 50,
                        minCropBoxHeight: 50,
                    });
                };
                reader.readAsDataURL(file);
            }
        });
    
        // Handle cropping and display cropped images with a close button
        cropButton.addEventListener('click', () => {
            if (!cropper) {
                alert('Please select an image first.');
                return;
            }
    
            cropper.getCroppedCanvas().toBlob((blob) => {
                croppedImagesData.push(blob);
    
                const url = URL.createObjectURL(blob);
                const imageWrapper = document.createElement('div');
                imageWrapper.style.position = 'relative';
                imageWrapper.style.margin = '10px';
                imageWrapper.style.display = 'inline-block';
    
                // Add close button
                const closeButton = document.createElement('button');
                closeButton.innerHTML = '&times;';
                closeButton.style.position = 'absolute';
                closeButton.style.top = '5px';
                closeButton.style.right = '5px';
                closeButton.style.backgroundColor = '#ff0000';
                closeButton.style.color = '#fff';
                closeButton.style.border = 'none';
                closeButton.style.borderRadius = '50%';
                closeButton.style.width = '20px';
                closeButton.style.height = '20px';
                closeButton.style.cursor = 'pointer';
    
                closeButton.addEventListener('click', function() {
                    const index = Array.from(croppedImagesContainer.children).indexOf(imageWrapper);
                    croppedImagesData.splice(index, 1); // Remove the cropped image from the data array
                    croppedImagesContainer.removeChild(imageWrapper); // Remove the image element
                });
    
                const imgElement = document.createElement('img');
                imgElement.src = url;
                imgElement.style.maxWidth = '100px';
                imgElement.style.margin = '10px';
    
                imageWrapper.appendChild(closeButton);
                imageWrapper.appendChild(imgElement);
                croppedImagesContainer.appendChild(imageWrapper);
    
                cropperContainer.style.display = 'none';
                cropButton.style.display = 'none';
                inputImage.value = '';
                inputImage.disabled = false;
            }, 'image/png');
        });
    
        // Handle form submission with cropped images
        document.getElementById('productForm').addEventListener('submit', function(event) {
            event.preventDefault();
    
            const formData = new FormData(this);
            formData.delete('productImages'); // Remove the original productImages file input
    
            // Append all cropped images as blobs to the form data
            croppedImagesData.forEach((blob, index) => {
                formData.append(`productImages`, blob, `cropped_${index}.png`);
            });
    
            fetch(this.action, {
                method: 'POST',
                body: formData,
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            }).then(data => {
                if (data.message) {
                    alert(data.message);
                    location.reload();
                } else {
                    alert('Failed to add product: ' + (data.error || 'Unknown error'));
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('Failed to add product: ' + error.message);
            });
        });
</script>

   