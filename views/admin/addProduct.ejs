
    
    <!-- include the sidebar partial  -->
    <%- include('sidebar') %>
 
 
      <!-- Navbar -->
      <div class="left-0 right-0 z-10 flex items-center justify-center p-8 h-20 shadow-md ml-64 bg-gray-100">
        <h2 class="text-2xl font-bold">Add Products</h2>
    </div>
    
   <div class="mx-8 pb-24 pt-28 ml-64 pl-8">

    <form id="addProductForm" class="space-y-6">
      <!-- Product Name -->
      <div>
        <label for="productName" class="block">Product Name</label>
        <input type="text" id="productName" name="productName" class="border border-gray-300 p-2 w-full" />
        <p id="productNameError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Description -->
      <div>
        <label for="description" class="block">Description</label>
        <input type="text" id="description" name="description" class="border border-gray-300 p-2 w-full" />
        <p id="descriptionError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Price -->
      <div>
        <label for="price" class="block">Price</label>
        <input type="text" id="price" name="price" class="border border-gray-300 p-2 w-full" min="0" />
        <p id="priceError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Discount -->
      <div>
        <label for="discount" class="block">Discount</label>
        <input type="text" id="discount" name="discount" class="border border-gray-300 p-2 w-full" min="0" />
        <p id="discountError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Stock -->
      <div>
        <label for="stock" class="block">Stock</label>
        <input type="text" id="stock" name="stock" class="border border-gray-300 p-2 w-full" min="0" />
        <p id="stockError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Category -->
      <div>
        <label for="category" class="block">Category</label>
        <select id="category" name="category" class="border border-gray-300 p-2 w-full">
          <option value="" disabled selected>Select a category</option>
          <% categories.forEach(function (category) { %>
            <option value="<%= category._id %>"><%= category.name %></option>
          <% }); %>
        </select>
        <p id="categoryError" class="text-red-500 text-sm" aria-live="assertive"></p>
      </div>
  
      <!-- Product Images -->
      <div>
        <label for="images" class="block">Product Images</label>
        <input
          type="file"
          id="images"
          accept="image/*"
          class="border border-blue-500 p-3 w-full cursor-pointer hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <p id="imageError" class="text-red-500 text-sm mt-2" aria-live="assertive"></p>
  
        <!-- Preview Area -->
        <div id="imagePreview" class="grid grid-cols-3 gap-2 mt-4">
            <!-- Dynamically generated image previews will appear here -->
        </div>
  
      <!-- Cropper Modal -->
      <div id="cropperModal" class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 hidden z-50">
        <div class="bg-white p-4 rounded-lg w-[90%] max-w-[600px]">
          <h2 class="text-lg font-semibold mb-4">Crop Image</h2>
          <!-- Cropper container -->
          <div class="w-full h-[400px] flex justify-center items-center overflow-hidden">
            <img id="cropperImage" src="" alt="To be cropped" class="max-w-full max-h-full block">
          </div>
          <!-- Modal buttons -->
          <div class="flex justify-end space-x-4 mt-4">
            <button id="cancelCrop" type="button" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
            <button id="cropImage" type="button" class="px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-900">Crop</button>
          </div>
        </div>
      </div>
  
      <!-- Submit Button -->
      <div class="text-right">
        <button
          type="submit"
          class="px-4 py-2 bg-blue-800 text-white text-sm tracking-wider font-medium rounded hover:bg-blue-900">
          Add Product
        </button>
      </div>
    </form>
  </div>
  
 
 
  <!-- Updated JavaScript for handling form submission -->
  <script>
    let selectedFile;
    let cropper;
    let croppedImages = []; // Store the cropped images' blobs
    const cropperModal = document.getElementById('cropperModal');
    const imagePreview = document.getElementById('imagePreview');
    const cropperImage = document.getElementById('cropperImage');
    const imagesInput = document.getElementById('images');
    const imageError = document.getElementById("imageError");
  
    // Handle image selection
    imagesInput.addEventListener('change', (event) => {
      const files = event.target.files;
      if (files && files.length > 0) {
        selectedFile = files[0];
  
        imageError.textContent = '';
  
        // Validate file type
        if (!selectedFile.type.startsWith('image/')) {
          imageError.textContent = 'Please select a valid image file.';
          imagesInput.value = '';
          return;
        }
  
        const reader = new FileReader();
  
        reader.onload = function (e) {
          cropperImage.src = e.target.result;
          cropperModal.classList.remove('hidden');
          if (cropper) {
            cropper.destroy();
          }
          cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
          });
        };
        reader.readAsDataURL(selectedFile);
      }
    });
  
    // Cancel button - close the modal
    document.getElementById('cancelCrop').addEventListener('click', () => {
      cropperModal.classList.add('hidden');
      imagesInput.value = ''; // Clear selected files
    });
  
    // Crop image button
    document.getElementById('cropImage').addEventListener('click', () => {
      const canvas = cropper.getCroppedCanvas();
      canvas.toBlob((blob) => {
        // Create a new file from the blob
        const croppedFile = new File([blob], `cropped-${Date.now()}.png`, { type: 'image/png' });
  
        // Store the cropped image as a file in FormData
        croppedImages.push(croppedFile);
  
        // Create the preview element (unchanged)
        const previewContainer = document.createElement('div');
        previewContainer.classList.add('relative');
  
        const img = document.createElement('img');
        img.src = URL.createObjectURL(croppedFile);
        img.classList.add('w-full', 'h-auto', 'rounded');
  
        const removeButton = document.createElement('button');
        removeButton.textContent = 'Remove';
        removeButton.classList.add('absolute', 'top-0', 'right-0', 'bg-red-600', 'text-white', 'rounded', 'px-2', 'py-1', 'text-xs');
        removeButton.addEventListener('click', () => {
          imagePreview.removeChild(previewContainer); // Remove preview
          const index = croppedImages.indexOf(croppedFile);
          if (index > -1) {
            croppedImages.splice(index, 1); // Remove from array
          }
          imagesInput.value = '';
        });
  
        previewContainer.appendChild(img);
        previewContainer.appendChild(removeButton);
        imagePreview.appendChild(previewContainer);
  
        cropperModal.classList.add('hidden'); // Close modal
        imagesInput.value = '';
      }, 'image/png');
    });
  
    // Form validation before submission
    document.getElementById("addProductForm").addEventListener("submit", async function (e) {
      e.preventDefault(); // Prevent the default form submission
  
      let isValid = true;
      // Perform all the validation checks here (already present in your code)
  
      // Product Name validation
      const productName = document.getElementById("productName").value;
      const productNameError = document.getElementById("productNameError");
      if (productName.length < 3 || productName.length > 50) {
        productNameError.textContent = "Product name must be between 3 and 50 characters and contain no special characters.";
        isValid = false;
      } else {
        productNameError.textContent = "";
      }
  
      // Description validation
      const description = document.getElementById("description").value;
      const descriptionError = document.getElementById("descriptionError");
      if (description.length < 10 || description.length > 1000 || /[^a-zA-Z0-9 ]/.test(description)) {
        descriptionError.textContent = "Product description must be between 10 and 1000 characters.";
        isValid = false;
      } else {
        descriptionError.textContent = "";
      }
  
      // Category validation
      const category = document.getElementById("category").value;
      const categoryError = document.getElementById("categoryError");
      if (!category) {
        categoryError.textContent = "Please select a category.";
        isValid = false;
      } else {
        categoryError.textContent = "";
      }
  
      // Price validation
      const price = parseFloat(document.getElementById("price").value);
      const priceError = document.getElementById("priceError");
      if (isNaN(price) || price <= 0) {
        priceError.textContent = "Product price must be greater than zero.";
        isValid = false;
      } else {
        priceError.textContent = "";
      }
  
      // Stock validation
      const stock = parseInt(document.getElementById("stock").value);
      const stockError = document.getElementById("stockError");
      if (isNaN(stock) || stock < 0) {
        stockError.textContent = "Stock must be zero or greater.";
        isValid = false;
      } else {
        stockError.textContent = "";
      }
  
      // Discount validation
      const discount = parseInt(document.getElementById("discount").value);
      const discountError = document.getElementById("discountError");
      if (isNaN(discount) || discount < 0 || discount > 90) {
        discountError.textContent = "Discount must be a percentage between 0 and 100.";
        isValid = false;
      } else {
        discountError.textContent = "";
      }
  
      // Image validation
      if (croppedImages.length < 3) {
        imageError.textContent = "Please select at least 3 images.";
        isValid = false;
      } else {
        imageError.textContent = "";
      }
  
      if (!isValid) {
        return;
      }
  
      // Now, create FormData and append all fields, including the cropped images
      const formData = new FormData(this);
  
      // Append all the cropped images
      croppedImages.forEach((image, index) => {
        formData.append('newImages', image);
      });
  
      try {
        // Send the form data using fetch
        const response = await fetch('/admin/addproduct', {
          method: 'POST',
          body: formData
        });
  
        const result = await response.json();
  
        if (response.ok) {
          // Show SweetAlert for successful product adding
          Swal.fire({
            icon: 'success',
            title: 'Successfully Added!',
            text: 'Product successfully added.',
            background: '#F8F9FA',
            color: '#333',
            timer: 3000,
            showConfirmButton: false
          });
  
          // Redirect to Product list page
          setTimeout(() => {
            window.location.href = '/admin/products'
          }, 2000);
  
        } else {
          // Show SweetAlert for Multer error
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message || 'An error occurred while uploading the product.',
            background: '#F8F9FA',
            color: '#333',
            timer: 3000,
            showConfirmButton: false
          });
        }
      } catch (error) {
        console.error(error);
        // Show SweetAlert for network or other errors
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'There was an issue processing your request. Please try again.',
          background: '#F8F9FA',
          color: '#333',
          timer: 3000,
          showConfirmButton: false
        });
      }
    });
  </script>
  
 
  
  
     <!-- Cropper JS -->
     <link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet">
       <!-- Cropper JS -->
       <script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script> 
       <!-- JavaScript Libraries(needed)-->
       <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
       <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    
        <!-- Toastify  -->
        <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
           <!-- Tailwind CSS Script -->
           <script src="https://cdn.tailwindcss.com"></script>
    
           <!-- SweetAlert -->
           <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
       
         
       
           <!-- Toastify  -->
           <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
 